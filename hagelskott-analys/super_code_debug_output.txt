*** Super-sök rapport 2024-12-27_14-20-18 ***
Projektkatalog: C:\Users\tjans\Documents\Hagel\hagelskott-analys

=== POTENTIELLA PROBLEM UPPTÄCKTA i 475 filer ===

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\check_requirements.py
  → [Manual print statements] rad 25: print("Kontrollerar Python-beroenden...")
  → [Manual print statements] rad 39: print("\nSaknade eller felaktiga paketversioner hittades.")
  → [Manual print statements] rad 42: print("\nSaknade paket:")
  → [Manual print statements] rad 44: print(f"  - {pkg}")
  → [Manual print statements] rad 47: print("\nFelaktiga versioner:")
  → [Manual print statements] rad 49: print(f"  - {pkg}")
  → [Manual print statements] rad 55: print(f"\nInstallerar {package}...")
  → [Manual print statements] rad 58: print(f"Lyckades installera {package}")
  → [Manual print statements] rad 60: print(f"Kunde inte installera {package}: {str(e)}")
  → [Manual print statements] rad 65: print("Alla beroenden är korrekt installerade!")
  → [Manual print statements] rad 70: print("\nKlar att köra development.py")
  → [Manual print statements] rad 74: print("\nKunde inte starta på grund av saknade beroenden.")

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\deeper_code_check.py
  → [MongoDB 'db.db' usage] rad 5: och letar efter olika möjliga fel, t.ex. "db.db", föråldrade pydantic-konfigurationer,
  → [MongoDB 'db.db' usage] rad 18: "MongoDB 'db.db' usage": re.compile(r"\bdb\.db\b"),  # Letar efter "db.db"
  → [Old pydantic config 'allow_population_by_field_name'] rad 19: "Old pydantic config 'allow_population_by_field_name'": re.compile(r"allow_population_by_field_name"),
  → [Manual print statements] rad 69: print("✅  Inga misstänkta träffar i koden enligt angivna mönster!")
  → [Manual print statements] rad 71: print("\n=== POTENTIELLA PROBLEM UPPTÄCKTA ===\n")
  → [Manual print statements] rad 73: print(f"FIL: {fpath}")
  → [Manual print statements] rad 75: print(f"  → [{m['pattern']}] rad {m['line_no']}: {m['line_text']}")
  → [Manual print statements] rad 76: print()
  → [Manual print statements] rad 77: print("Färdig.")
  → [Manual print statements] rad 81: print("Användning: python deeper_code_check.py <C:\Users\tjans\Documents\Hagel\hagelskott-analys>")
  → [Manual print statements] rad 86: print(f"Sökvägen '{target_directory}' är ingen katalog eller finns inte.")

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\development.py
  → [Manual print statements] rad 57: print(f"Process {pid} på port {port} stängd.")
  → [Manual print statements] rad 59: print(f"Misslyckades med att stänga process {pid}: {kill_result.stderr}")
  → [Manual print statements] rad 61: print(f"Fel vid stängning av processer på port {port}: {str(e)}")

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\diagnose.py
  → [Manual print statements] rad 12: print(f"Python-version: OK ({current_version})")
  → [Manual print statements] rad 15: print(f"Python-version FEL! ({current_version} istället för {required_version})")
  → [Manual print statements] rad 39: print(f"Paket OK: {package_name} ({installed_packages[package_name.lower()]})")
  → [Manual print statements] rad 42: print(f"Fel vid kontroll av paket: {str(e)}")
  → [Manual print statements] rad 45: print("\nSaknade paket:")
  → [Manual print statements] rad 47: print(f"- {pkg}")
  → [Manual print statements] rad 49: print("\nAlla paket är installerade.")
  → [Manual print statements] rad 56: print(f"PYTHONPATH: OK ({pythonpath})")
  → [Manual print statements] rad 59: print("PYTHONPATH FEL! Variabeln är inte satt.")
  → [Manual print statements] rad 67: print(f"Port {port} FEL! Den är upptagen.")
  → [Manual print statements] rad 70: print(f"Port {port}: OK (ledig)")
  → [Manual print statements] rad 85: print(f"\nRapport genererad: {report_path.resolve()}")
  → [Manual print statements] rad 89: print("Startar diagnostik...")

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\fix_mongodb.py
  → [Manual print statements] rad 18: print(f"Fel vid installation av {package_name}: {e.stderr}")
  → [Manual print statements] rad 32: print("Avinstallerar gamla versioner...")
  → [Manual print statements] rad 35: print("\nInstallerar korrekta versioner...")
  → [Manual print statements] rad 37: print(f"Installerar {package}=={version}")
  → [Manual print statements] rad 39: print(f"VARNING: Kunde inte installera {package}")
  → [Manual print statements] rad 41: print(f"✓ {package} installerat")
  → [Manual print statements] rad 54: print(f"✓ Skapade/verifierade mapp: {directory}")
  → [Manual print statements] rad 57: print("\n=== Startar reparation av utvecklingsmiljön ===\n")
  → [Manual print statements] rad 59: print("1. Fixar beroenden...")
  → [Manual print statements] rad 62: print("\n2. Skapar nödvändiga mappar...")
  → [Manual print statements] rad 65: print("\n3. Väntar på att systemet ska stabiliseras...")
  → [Manual print statements] rad 68: print("\nKlar! Nu kan du köra development.py")
  → [Manual print statements] rad 72: print("\nStartar development.py...")
  → [Manual print statements] rad 75: print("\nOK, du kan starta development.py senare genom att köra: python development.py")

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\super_code_debug.py
  → [MongoDB 'db.db' usage] rad 24: "MongoDB 'db.db' usage": re.compile(r"\bdb\.db\b"),
  → [Motor usage with bracket access (db['collection'])] rad 25: "Motor usage with bracket access (db['collection'])": re.compile(r"db\[\s*['\"].+['\"]\s*\]"),
  → [Old pydantic config 'allow_population_by_field_name'] rad 26: "Old pydantic config 'allow_population_by_field_name'": re.compile(r"allow_population_by_field_name"),
  → [Hard-coded secrets (e.g. SECRET_KEY = '...')] rad 30: "Hard-coded secrets (e.g. SECRET_KEY = '...')": re.compile(r"(SECRET_KEY\s*=\s*['\"]).+?(?=['\"])"),
  → [Potential debug 'import pdb'] rad 32: "Potential debug 'import pdb'": re.compile(r"import\s+pdb"),
  → [Potentially suspicious eval() usage] rad 33: "Potentially suspicious eval() usage": re.compile(r"\beval\s*\("),
  → [Manual print statements] rad 51: print(f"DEBUG: Scanning file {filepath}")
  → [Manual print statements] rad 99: print(f"Fel: {args.directory} är ingen katalog eller existerar inte.")
  → [Manual print statements] rad 103: print(f"DEBUG: Starting super-sök i katalog: {args.directory}")
  → [Manual print statements] rad 104: print(f"DEBUG: Output kommer sparas i: {args.output}")
  → [Manual print statements] rad 116: print(msg)
  → [Manual print statements] rad 120: print(msg)
  → [Manual print statements] rad 124: print(f"FIL: {fpath}")
  → [Manual print statements] rad 128: print(line_info)
  → [Manual print statements] rad 130: print()
  → [Manual print statements] rad 132: print(f"\nFärdig. Se {args.output} för full rapport.")

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\add_full_forum_structure.py
  → [Manual print statements] rad 313: print(f"Deleted {result.deleted_count} categories")
  → [Manual print statements] rad 315: print(f"Error deleting categories: {e}")
  → [Manual print statements] rad 345: print(f"Added category: {category['name']}")
  → [Manual print statements] rad 354: print(f"Error adding category {category['name']}: {e}")
  → [Manual print statements] rad 360: print("Deleting existing categories...")
  → [Manual print statements] rad 363: print("Creating new forum structure...")
  → [Manual print statements] rad 367: print("Forum structure created successfully!")
  → [Manual print statements] rad 370: print(f"Error creating forum structure: {e}")

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\main.py
  → [Manual print statements] rad 126: print(f"Request: {request.method} {request.url}")
  → [Manual print statements] rad 127: print(f"Headers: {request.headers}")
  → [Manual print statements] rad 129: print(f"Response Status: {response.status_code}")
  → [Incorrect depends usage] rad 182: current_user: User = Depends(get_current_active_user)
  → [MongoDB 'db.db' usage] rad 231: await db.db.notifications.create_index("user_id")
  → [MongoDB 'db.db' usage] rad 232: await db.db.forum_posts.create_index([("created_at", -1)])
  → [MongoDB 'db.db' usage] rad 233: await db.db.shots.create_index("user_id")
  → [Incorrect depends usage] rad 236: async def get_user(current_user: User = Depends(get_current_active_user)):
  → [Incorrect depends usage] rad 240: async def get_notifications(current_user: User = Depends(get_current_active_user)):
  → [MongoDB 'db.db' usage] rad 241: notifications = await db.db.notifications.find(
  → [MongoDB 'db.db' usage] rad 248: posts = await db.db.forum_posts.find().sort(
  → [Incorrect depends usage] rad 254: async def get_user_activity(current_user: User = Depends(get_current_active_user)):
  → [MongoDB 'db.db' usage] rad 256: "totalAnalyses": await db.db.shots.count_documents({"user_id": current_user.id}),
  → [Incorrect depends usage] rad 266: async def get_user_settings(current_user: User = Depends(get_current_active_user)):
  → [MongoDB 'db.db' usage] rad 269: settings = await db.db.user_settings.find_one(
  → [Incorrect depends usage] rad 338: current_user: User = Depends(get_current_active_user)
  → [MongoDB 'db.db' usage] rad 347: result = await db.db.user_settings.update_one(
  → [Incorrect depends usage] rad 366: current_user: User = Depends(get_current_active_user)
  → [MongoDB 'db.db' usage] rad 392: await db.db.user_settings.update_one(
  → [Incorrect depends usage] rad 409: current_user: User = Depends(get_current_active_user)
  → [MongoDB 'db.db' usage] rad 414: result = await db.db.shots.find_one({"_id": ObjectId(pattern_id)})
  → [MongoDB 'db.db' usage] rad 492: existing_user = await db.db.users.find_one({"username": "test_user"})
  → [MongoDB 'db.db' usage] rad 494: await db.db.users.insert_one(test_user)
  → [Manual print statements] rad 495: print("Test user created successfully")
  → [Manual print statements] rad 497: print("Test user already exists")
  → [Manual print statements] rad 499: print(f"Error creating test user: {e}")
  → [MongoDB 'db.db' usage] rad 505: user = await db.db.users.find_one({"username": form_data.username})
  → [MongoDB 'db.db' usage] rad 568: await db.db.command("ping")
  → [Incorrect depends usage] rad 584: current_user: User = Depends(get_current_active_user)
  → [MongoDB 'db.db' usage] rad 589: result = await db.db.shots.find_one({"_id": ObjectId(pattern_id)})
  → [Incorrect depends usage] rad 680: current_user: User = Depends(get_current_active_user)
  → [Incorrect depends usage] rad 725: current_user: User = Depends(get_current_active_user)
  → [Incorrect depends usage] rad 742: current_user: User = Depends(get_current_active_user)
  → [Incorrect depends usage] rad 762: current_user: User = Depends(get_current_active_user)
  → [MongoDB 'db.db' usage] rad 766: analysis_result = await db.db.shots.find_one({
  → [Incorrect depends usage] rad 811: dependencies=[Depends(get_current_active_user)]
  → [Incorrect depends usage] rad 824: dependencies=[Depends(get_current_active_user)]

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\test_auth.py
  → [Manual print statements] rad 23: print("\n=== Testing Database Connection ===")
  → [Manual print statements] rad 28: print("✅ Database connection successful")
  → [Manual print statements] rad 31: print(f"❌ Database connection failed: {str(e)}")
  → [Manual print statements] rad 41: print("\n=== Testing User Existence ===")
  → [Manual print statements] rad 43: print("❌ No database handle; cannot check user existence.")
  → [Manual print statements] rad 49: print("✅ Test user found in database")
  → [Manual print statements] rad 50: print(f"Username: {user['username']}")
  → [Manual print statements] rad 51: print(f"Email: {user.get('email', 'Not set')}")
  → [Manual print statements] rad 52: print(f"Has password hash: {'hashed_password' in user}")
  → [Manual print statements] rad 55: print("❌ Test user not found in database")
  → [Manual print statements] rad 58: print(f"❌ Error checking user: {str(e)}")
  → [Manual print statements] rad 68: print("\n=== Testing Password Verification ===")
  → [Manual print statements] rad 70: print("❌ Cannot test password - no user found")
  → [Manual print statements] rad 77: print(f"Password verification result: {'✅ Success' if is_valid else '❌ Failed'}")
  → [Manual print statements] rad 78: print(f"Test password used: {TEST_PASSWORD}")
  → [Manual print statements] rad 79: print(f"Stored hash exists: {'Yes' if stored_hash else 'No'}")
  → [Manual print statements] rad 81: print("❌ No password hash found in user document")
  → [Manual print statements] rad 83: print(f"❌ Error verifying password: {str(e)}")
  → [Manual print statements] rad 92: print("\n=== Testing Login API ===")
  → [Manual print statements] rad 104: print(f"Status code: {response.status_code}")
  → [Manual print statements] rad 105: print(f"Response body: {response.text}")
  → [Manual print statements] rad 108: print(f"❌ Error testing login API: {str(e)}")
  → [Manual print statements] rad 118: print("\n=== Recreating Test User ===")
  → [Manual print statements] rad 120: print("❌ No database handle; cannot recreate user.")
  → [Manual print statements] rad 136: print("✅ Test user recreated successfully")
  → [Manual print statements] rad 139: print(f"❌ Error recreating test user: {str(e)}")
  → [Manual print statements] rad 145: print("Starting authentication diagnostic tests...")
  → [Manual print statements] rad 150: print("Cannot proceed without database connection")
  → [Manual print statements] rad 176: print("\n=== Retesting with new user ===")

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\app\api\routes\auth.py
  → [Incorrect depends usage] rad 375: current_user: UserInDB = Depends(get_current_active_user)
  → [Incorrect depends usage] rad 422: async def read_users_me(current_user: UserInDB = Depends(get_current_active_user)):

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\app\api\routes\loads.py
  → [Motor usage with bracket access (db['collection'])] rad 44: # Hämta Motor-databasen istället för db["loads"] direkt.

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\app\api\routes\settings.py
  → [Incorrect depends usage] rad 12: current_user: dict = Depends(get_current_active_user)
  → [Incorrect depends usage] rad 34: async def get_user_settings(current_user: dict = Depends(get_current_active_user)):

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\app\api\routes\users.py
  → [Incorrect depends usage] rad 125: async def get_user_profile(current_user: User = Depends(get_current_active_user)):
  → [Incorrect depends usage] rad 161: current_user: User = Depends(get_current_active_user)
  → [Incorrect depends usage] rad 198: async def get_user_settings(current_user: User = Depends(get_current_active_user)):
  → [Incorrect depends usage] rad 224: current_user: User = Depends(get_current_active_user)
  → [Incorrect depends usage] rad 257: current_user: User = Depends(get_current_active_user)
  → [Incorrect depends usage] rad 299: current_user: User = Depends(get_current_active_user)
  → [Incorrect depends usage] rad 334: current_user: User = Depends(get_current_active_user)
  → [Incorrect depends usage] rad 361: current_user: User = Depends(get_current_active_user)
  → [Incorrect depends usage] rad 386: async def reset_user_settings(current_user: User = Depends(get_current_active_user)):

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\app\api\schemas\analysis.py
  → [Old pydantic config 'allow_population_by_field_name'] rad 135: allow_population_by_field_name = True

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\app\api\schemas\component_schemas.py
  → [Old pydantic config 'allow_population_by_field_name'] rad 60: allow_population_by_field_name = True

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\app\api\schemas\load_schemas.py
  → [Old pydantic config 'allow_population_by_field_name'] rad 51: allow_population_by_field_name = True

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\app\api\schemas\user.py
  → [Old pydantic config 'allow_population_by_field_name'] rad 39: allow_population_by_field_name = True

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\dataclasses.py
  → [Potentially suspicious eval() usage] rad 595: # way to fix it would be to eval() the string "CV" with the
  → [Potentially suspicious eval() usage] rad 597: # a eval() penalty for every single field of every dataclass

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\six.py
  → [Manual print statements] rad 796: raise TypeError("invalid keyword arguments to print()")

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\threadpoolctl.py
  → [Manual print statements] rad 1271: print("WARNING: could not import", module, file=sys.stderr)
  → [Manual print statements] rad 1276: print(json.dumps(threadpool_info(), indent=2))

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\typing_extensions.py
  → [Potentially suspicious eval() usage] rad 1215: (unless you are familiar with how eval() and exec() work).  The
  → [Manual print statements] rad 2153: print("It's an int")
  → [Manual print statements] rad 2155: print("It's a str")
  → [Manual print statements] rad 2559: print(f"Runtime type is {type(obj).__name__!r}", file=sys.stderr)
  → [Manual print statements] rad 2580: print("It's an int")
  → [Manual print statements] rad 2582: print("It's a str")

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\aiohttp\client_reqrep.py
  → [Manual print statements] rad 900: print(
  → [Manual print statements] rad 906: print(self.headers, file=out)

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\aiohttp\payload_streamer.py
  → [Manual print statements] rad 19: print(await resp.text())

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\aiohttp\web.py
  → [Manual print statements] rad 452: print(

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\anyio\_core\_fileio.py
  → [Manual print statements] rad 58: print(line)

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\asyncio\tasks.py
  → [Manual print statements] rad 176: print('No stack for %r' % self, file=file)
  → [Manual print statements] rad 178: print('Traceback for %r (most recent call last):' % self,
  → [Manual print statements] rad 181: print('Stack for %r (most recent call last):' % self,
  → [Manual print statements] rad 186: print(line, file=file, end='')

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\attr\_make.py
  → [Potentially suspicious eval() usage] rad 217: eval(bytecode, globs, locs)

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\black\__init__.py
  → [Manual print statements] rad 1177: >>> print(black.format_str("def f(arg:str='')->None:...", mode=black.Mode()))
  → [Manual print statements] rad 1183: >>> print(

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\blib2to3\pgen2\conv.py
  → [Manual print statements] rad 66: print(f"Can't open {filename}: {err}")
  → [Manual print statements] rad 75: print(f"{filename}({lineno}): can't parse {line.strip()}")
  → [Manual print statements] rad 116: print(f"Can't open {filename}: {err}")
  → [Potentially suspicious eval() usage] rad 186: rawbitset = eval(mo.group(1))
  → [Potentially suspicious eval() usage] rad 212: y = eval(y)

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\blib2to3\pgen2\grammar.py
  → [Manual print statements] rad 157: print("s2n")
  → [Manual print statements] rad 159: print("n2s")
  → [Manual print statements] rad 161: print("states")
  → [Manual print statements] rad 163: print("dfas")
  → [Manual print statements] rad 165: print("labels")
  → [Manual print statements] rad 167: print("start", self.start)

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\blib2to3\pgen2\literals.py
  → [Potentially suspicious eval() usage] rad 4: """Safely evaluate Python string literals without using eval()."""
  → [Manual print statements] rad 62: print(i, c, s, e)

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\blib2to3\pgen2\pgen.py
  → [Potentially suspicious eval() usage] rad 100: value = eval(label)
  → [Manual print statements] rad 229: print("Dump of NFA for", name)
  → [Manual print statements] rad 232: print("  State", i, state is finish and "(final)" or "")
  → [Manual print statements] rad 240: print("    -> %d" % j)
  → [Manual print statements] rad 242: print("    %s -> %d" % (label, j))
  → [Manual print statements] rad 245: print("Dump of DFA for", name)
  → [Manual print statements] rad 247: print("  State", i, state.isfinal and "(final)" or "")
  → [Manual print statements] rad 249: print("    %s -> %d" % (label, dfa.index(next)))

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\blib2to3\pgen2\tokenize.py
  → [Manual print statements] rad 248: print(

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\bson\raw_bson.py
  → [Manual print statements] rad 36: ...     print(f"raw document: {doc.raw}")
  → [Manual print statements] rad 37: ...     print(f"decoded document: {bson.decode(doc.raw)}")

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\certifi\__main__.py
  → [Manual print statements] rad 10: print(contents())
  → [Manual print statements] rad 12: print(where())

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\cffi\recompiler.py
  → [Potentially suspicious eval() usage] rad 78: flags = eval(self.flags, G_FLAGS)
  → [Manual print statements] rad 1428: print("generating %s" % (target_file,))
  → [Manual print statements] rad 1444: print("(already up-to-date)")
  → [Manual print statements] rad 1579: print('%s %r' % (msg, os.path.abspath(tmpdir)))

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\click\utils.py
  → [Manual print statements] rad 252: modify ``sys.stdout``, so ``sys.stdout.write()`` and ``print()``

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\cv2\__init__.py
  → [Manual print statements] rad 14: print('OpenCV bindings requires "numpy" package.')
  → [Manual print statements] rad 15: print('Install it via command:')
  → [Manual print statements] rad 16: print('    pip install numpy')
  → [Manual print statements] rad 31: print("Can't load Python code for module:", module_name,
  → [Manual print statements] rad 44: if enable_debug_print: print('    symbol({}): {} = {}'.format(name, k, v))
  → [Manual print statements] rad 60: print("Extra submodules is loaded only for Python 3")
  → [Manual print statements] rad 75: print(sys.path)
  → [Manual print statements] rad 84: if DEBUG: print('OpenCV loader: os.name="{}"  platform.system()="{}"'.format(os.name, str(platform.system())))
  → [Manual print statements] rad 103: if DEBUG: print('OpenCV loader: config not found, skip: {}'.format(fpath))
  → [Manual print statements] rad 105: if DEBUG: print('OpenCV loader: loading config: {}'.format(fpath))
  → [Manual print statements] rad 117: if DEBUG: print('OpenCV loader: PYTHON_EXTENSIONS_PATHS={}'.format(str(l_vars['PYTHON_EXTENSIONS_PATHS'])))
  → [Manual print statements] rad 118: if DEBUG: print('OpenCV loader: BINARIES_PATHS={}'.format(str(l_vars['BINARIES_PATHS'])))
  → [Manual print statements] rad 129: if DEBUG: print('OpenCV loader: exception during checking workaround for sys.path[0]')
  → [Manual print statements] rad 141: if DEBUG: print('Failed os.add_dll_directory(): '+ str(e))
  → [Manual print statements] rad 144: if DEBUG: print('OpenCV loader: PATH={}'.format(str(os.environ['PATH'])))
  → [Manual print statements] rad 149: if DEBUG: print("Relink everything from native cv2 module to cv2 package")
  → [Manual print statements] rad 170: print("Exception during delete OpenCV_LOADER:", e)
  → [Manual print statements] rad 172: if DEBUG: print('OpenCV loader: binary extension... OK')
  → [Manual print statements] rad 176: if DEBUG: print("Extra Python code for", submodule, "is loaded")
  → [Manual print statements] rad 178: if DEBUG: print('OpenCV loader: DONE')

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\dotenv\cli.py
  → [Manual print statements] rad 63: print(f"Error opening env file: {exc}", file=sys.stderr)

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\dotenv\ipython.py
  → [Manual print statements] rad 30: print("cannot find .env file")

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\email_validator\__main__.py
  → [Manual print statements] rad 47: print(f"{email} {e}")
  → [Manual print statements] rad 53: print(json.dumps(result.as_dict(), indent=2, sort_keys=True, ensure_ascii=False))
  → [Manual print statements] rad 55: print(e)

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\h11\tests\test_against_stdlib_http.py
  → [Manual print statements] rad 57: print(event)
  → [Manual print statements] rad 112: print(info)

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\h11\tests\test_connection.py
  → [Manual print statements] rad 916: print(c._cstate.states)

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\h11\tests\test_io.py
  → [Manual print statements] rad 365: print("Test 1")
  → [Manual print statements] rad 370: print("Test 2")

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\httpx\_exceptions.py
  → [Manual print statements] rad 54: print(f"HTTP Exception for {exc.request.url} - {exc}")

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\httpx\_main.py
  → [Manual print statements] rad 25: console.print("[bold]HTTPX :butterfly:", justify="center")
  → [Manual print statements] rad 26: console.print()
  → [Manual print statements] rad 27: console.print("A next generation HTTP client.", justify="center")
  → [Manual print statements] rad 28: console.print()
  → [Manual print statements] rad 29: console.print(
  → [Manual print statements] rad 32: console.print()
  → [Manual print statements] rad 96: console.print(table)
  → [Manual print statements] rad 147: console.print(syntax)
  → [Manual print statements] rad 149: console.print(syntax)
  → [Manual print statements] rad 161: console.print(syntax)
  → [Manual print statements] rad 163: console.print(syntax)
  → [Manual print statements] rad 180: console.print(syntax)
  → [Manual print statements] rad 182: console.print(f"<{len(response.content)} bytes of binary data>")
  → [Manual print statements] rad 214: console.print(f"* Connecting to {host!r}")
  → [Manual print statements] rad 218: console.print(f"* Connected to {server_addr[0]!r} on port {server_addr[1]}")
  → [Manual print statements] rad 226: console.print(f"* SSL established using {version!r} / {cipher[0]!r}")
  → [Manual print statements] rad 227: console.print(f"* Selected ALPN protocol: {alpn!r}")
  → [Manual print statements] rad 229: console.print("* Server certificate:")
  → [Manual print statements] rad 230: console.print(format_certificate(server_cert))
  → [Manual print statements] rad 249: console.print()
  → [Manual print statements] rad 504: console.print(f"[red]{type(exc).__name__}[/red]: {exc}")

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\httpx\__init__.py
  → [Manual print statements] rad 54: print(

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\httpx\_transports\base.py
  → [Manual print statements] rad 46: print(resp.status_code, resp.headers, body)

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\joblib\logger.py
  → [Manual print statements] rad 150: print(full_msg, file=sys.stderr)
  → [Manual print statements] rad 154: print(full_msg, file=f)

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\joblib\memory.py
  → [Potentially suspicious eval() usage] rad 166: (namely eval(repr(memorized_instance)) works).
  → [Manual print statements] rad 777: print(format_call(self.func, args, kwargs))
  → [Manual print statements] rad 855: print(max(0, (80 - len(msg))) * '_' + msg)
  → [Potentially suspicious eval() usage] rad 1118: def eval(self, func, *args, **kwargs):

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\joblib\parallel.py
  → [Manual print statements] rad 204: print(
  → [Manual print statements] rad 343: ...     print(Parallel()(delayed(neg)(i + 1) for i in range(5)))
  → [Manual print statements] rad 352: ...     print(Parallel()(delayed(neg)(i + 1) for i in range(5)))
  → [Manual print statements] rad 507: ...     print(Parallel()(delayed(neg)(i + 1) for i in range(5)))
  → [Manual print statements] rad 522: ...     print(Parallel()(delayed(neg)(i + 1) for i in range(5)))
  → [Manual print statements] rad 1179: ...         print('Produced %s' % i)

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\joblib\_store_backends.py
  → [Manual print statements] rad 170: print('{0}...'.format(msg))
  → [Manual print statements] rad 172: print('{0} from {1}'.format(msg, full_path))
  → [Manual print statements] rad 198: print('Persisting in %s' % item_path)
  → [Manual print statements] rad 314: print('Deleting item {0}'.format(item))

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\joblib\externals\loky\process_executor.py
  → [Manual print statements] rad 444: print(previous_tb)

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\joblib\externals\loky\backend\popen_loky_posix.py
  → [Manual print statements] rad 182: print("\n\n" + "-" * 80)
  → [Manual print statements] rad 183: print(f"{args.process_name} failed with traceback: ")
  → [Manual print statements] rad 184: print("-" * 80)
  → [Manual print statements] rad 187: print(traceback.format_exc())
  → [Manual print statements] rad 188: print("\n" + "-" * 80)

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\joblib\test\testutils.py
  → [Manual print statements] rad 7: print(_get_backing_memmap(arr).filename)

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\joblib\test\test_func_inspect_special_encoding.py
  → [File read error] rad -1: Could not read file: 'utf-8' codec can't decode byte 0xa4 in position 64: invalid start byte

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\joblib\test\test_memory.py
  → [Potentially suspicious eval() usage] rad 120: assert memory.eval(f, 1) == out
  → [Potentially suspicious eval() usage] rad 322: a1 = eval('lambda x: x')
  → [Potentially suspicious eval() usage] rad 324: b1 = eval('lambda x: x+1')
  → [Potentially suspicious eval() usage] rad 356: m = eval('lambda x: x')
  → [Manual print statements] rad 738: content = 'def f(x):\n    print(x)\n    return x\n'
  → [Manual print statements] rad 765: content = 'def f(x):\n    print("x=%s" % x)\n    return x\n'

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\joblib\test\test_memory_async.py
  → [Potentially suspicious eval() usage] rad 57: evaled = await memory.eval(f, 1)

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\joblib\test\test_parallel.py
  → [Manual print statements] rad 272: print(len(warninfo))
  → [Manual print statements] rad 1024: print(Parallel(n_jobs=2, backend=backend)(
  → [Manual print statements] rad 1065: print(Parallel(n_jobs=2, backend=backend)(
  → [Manual print statements] rad 1068: print(Parallel(n_jobs=2, backend=backend)(
  → [Manual print statements] rad 1071: print(Parallel(n_jobs=2, backend=backend)(
  → [Manual print statements] rad 1147: print(Parallel(backend="loky", n_jobs=2)(
  → [Manual print statements] rad 1188: print(Parallel(backend="loky", n_jobs=2)(
  → [Manual print statements] rad 1497: g_wr = weakref.finalize(g, lambda: print("Generator collected"))

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\joblib\test\test_testing.py
  → [Manual print statements] rad 9: 'print(result)',
  → [Manual print statements] rad 11: 'print(my_list)'])
  → [Manual print statements] rad 40: 'print("writing on stdout")',
  → [Manual print statements] rad 57: 'print("before sleep on stdout")',
  → [Manual print statements] rad 64: 'print("process should have be killed before")',

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\joblib\test\test_utils.py
  → [Manual print statements] rad 8: ["exec('import os')", "print(1)", "import os", "1+1; import os", "1^1"],

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\joblib\test\data\create_numpy_pickle.py
  → [Manual print statements] rad 64: print("Error: cannot generate file '{}' with arguments '{}'. "
  → [Manual print statements] rad 67: print("File '{}' generated successfully.".format(pickle_filename))

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\motor\core.py
  → [Manual print statements] rad 623: print(operation)
  → [Manual print statements] rad 1023: print(bson.decode_all(batch))
  → [Manual print statements] rad 1077: print(doc)
  → [Manual print statements] rad 1103: print(plan)
  → [Manual print statements] rad 1152: print(bson.decode_all(batch))
  → [Manual print statements] rad 1207: print(change)
  → [Manual print statements] rad 1244: print(change)
  → [Manual print statements] rad 1337: print(index)
  → [Manual print statements] rad 1474: ...     print("done")
  → [Manual print statements] rad 1492: ...     print("done")
  → [Manual print statements] rad 1576: ...         print("done")
  → [Manual print statements] rad 1643: ...         print(docs)
  → [Manual print statements] rad 1645: ...     print("done")
  → [Manual print statements] rad 2026: print(insert_change)
  → [Manual print statements] rad 2043: print(insert_change)
  → [Manual print statements] rad 2071: print("Current resume token: %r" % (change_stream.resume_token,))
  → [Manual print statements] rad 2073: print("Change document: %r" % (change,))

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\motor\docstrings.py
  → [Manual print statements] rad 153: print("inserted %d, deleted %d, modified %d" % (
  → [Manual print statements] rad 156: print("upserted_ids: %s" % result.upserted_ids)
  → [Manual print statements] rad 158: print("collection:")
  → [Manual print statements] rad 160: print(doc)
  → [Manual print statements] rad 290: print(await db.test.create_indexes([index1, index2]))
  → [Manual print statements] rad 380: print(result.deleted_count)
  → [Manual print statements] rad 418: print(result.deleted_count)
  → [Manual print statements] rad 495: print(await db.test.count_documents({'x': 1}))
  → [Manual print statements] rad 497: print(doc)
  → [Manual print statements] rad 498: print(await db.test.count_documents({'x': 1}))
  → [Manual print statements] rad 588: print("original: %s" % original_doc)
  → [Manual print statements] rad 589: print("collection:")
  → [Manual print statements] rad 591: print(doc)
  → [Manual print statements] rad 656: print(await db.test.find_one_and_update(
  → [Manual print statements] rad 669: print(await db.example.find_one_and_update(
  → [Manual print statements] rad 681: print(await db.example.find_one_and_update(
  → [Manual print statements] rad 695: print(await db.example.find_one_and_update(
  → [Manual print statements] rad 715: print(await db.test.find_one_and_update(
  → [Manual print statements] rad 788: print(await db.test.create_index("x", unique=True))
  → [Manual print statements] rad 789: print(await db.test.index_information())
  → [Manual print statements] rad 848: print(result.inserted_id)
  → [Manual print statements] rad 932: print('matched %d, modified %d' %
  → [Manual print statements] rad 935: print('collection:')
  → [Manual print statements] rad 937: print(doc)
  → [Manual print statements] rad 950: print('matched %d, modified %d, upserted_id %r' %
  → [Manual print statements] rad 953: print('collection:')
  → [Manual print statements] rad 955: print(doc)
  → [Manual print statements] rad 1013: print('matched %d, modified %d' %
  → [Manual print statements] rad 1016: print('collection:')
  → [Manual print statements] rad 1018: print(doc)
  → [Manual print statements] rad 1080: print('matched %d, modified %d' %
  → [Manual print statements] rad 1083: print('collection:')
  → [Manual print statements] rad 1085: print(doc)
  → [Manual print statements] rad 1153: ...     print([d["_id"] for d in docs])
  → [Manual print statements] rad 1167: ...     print([(d["field1"], d["field2"]) for d in docs])
  → [Manual print statements] rad 1193: ...         print("%.1f %s" % (doc["score"], doc["field"]))
  → [Manual print statements] rad 1239: print(doc)
  → [Manual print statements] rad 1288: print(doc)

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\multipart\tests\test_multipart.py
  → [Manual print statements] rad 423: print(f"{first!r} / {last!r}")
  → [Manual print statements] rad 449: print(f" {first!r} / {last!r} ")
  → [Manual print statements] rad 812: # print(repr(param))
  → [Manual print statements] rad 813: # print("")
  → [Manual print statements] rad 814: # print(repr(self.fields))
  → [Manual print statements] rad 815: # print(repr(self.files))
  → [Manual print statements] rad 957: print("Running %d iterations of fuzz testing:" % (iterations,))
  → [Manual print statements] rad 987: print("  " + msg)
  → [Manual print statements] rad 1005: print("--------------------------------------------------")
  → [Manual print statements] rad 1006: print("Successes:  %d" % (successes,))
  → [Manual print statements] rad 1007: print("Failures:   %d" % (failures,))
  → [Manual print statements] rad 1008: print("Exceptions: %d" % (exceptions,))
  → [Manual print statements] rad 1021: print("Running %d iterations of fuzz testing:" % (iterations,))
  → [Manual print statements] rad 1025: print("  Testing with %d random bytes..." % (data_size,))
  → [Manual print statements] rad 1043: print("--------------------------------------------------")
  → [Manual print statements] rad 1044: print("Successes:  %d" % (successes,))
  → [Manual print statements] rad 1045: print("Failures:   %d" % (failures,))
  → [Manual print statements] rad 1046: print("Exceptions: %d" % (exceptions,))

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\numpy\exceptions.py
  → [Manual print statements] rad 153: >>> print(np.AxisError(2, 1, msg_prefix='error'))
  → [Manual print statements] rad 158: >>> print(np.AxisError('Custom error message'))

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\numpy\_pytesttester.py
  → [Manual print statements] rad 39: print("NumPy version %s" % np.__version__)
  → [Manual print statements] rad 41: print("NumPy relaxed strides checking option:", relaxed_strides)
  → [Manual print statements] rad 43: print("NumPy CPU features: ", (info if info else 'nothing enabled'))

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\numpy\__config__.py
  → [Manual print statements] rad 144: print(yaml.dump(CONFIG))
  → [Manual print statements] rad 150: print(json.dumps(CONFIG, indent=2))

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\numpy\core\arrayprint.py
  → [Potentially suspicious eval() usage] rad 1463: >>> assert eval(dtype_short_repr(dt)) == dt

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\numpy\core\cversions.py
  → [Manual print statements] rad 13: print(fullapi_hash(full_api))

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\numpy\core\einsumfunc.py
  → [Manual print statements] rad 774: >>> print(path_info[0])
  → [Manual print statements] rad 776: >>> print(path_info[1])
  → [Manual print statements] rad 798: >>> print(path_info[0])
  → [Manual print statements] rad 800: >>> print(path_info[1])

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\numpy\core\numerictypes.py
  → [Manual print statements] rad 485: ...     print(np.sctype2char(sctype))

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\numpy\core\records.py
  → [Manual print statements] rad 619: >>> print(r[1])
  → [Manual print statements] rad 715: >>> print(r[0])
  → [Manual print statements] rad 892: >>> print(r[5])
  → [Manual print statements] rad 1028: >>> print(r.col1)

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\numpy\core\shape_base.py
  → [Manual print statements] rad 180: ...     print(arr, arr.shape) # doctest: +SKIP

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\numpy\core\_add_newdocs.py
  → [Manual print statements] rad 53: ...     print(item)
  → [Manual print statements] rad 548: ...      print(i.multi_index)
  → [Manual print statements] rad 550: ...          print('', j.multi_index, y)
  → [Manual print statements] rad 1774: >>> print(x1)
  → [Manual print statements] rad 1776: >>> print(x2)
  → [Manual print statements] rad 4648: >>> print(type(y))
  → [Manual print statements] rad 4815: ...     print("Floating point error (%s), with flag %s" % (type, flag))
  → [Manual print statements] rad 4879: ...     print("Floating point error (%s), with flag %s" % (type, flag))
  → [Manual print statements] rad 5091: >>> print(np.exp.identity)
  → [Manual print statements] rad 6085: >>> print(dt.fields)

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\numpy\core\_machar.py
  → [Manual print statements] rad 356: print(MachAr())

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\numpy\core\_ufunc_config.py
  → [Manual print statements] rad 267: ...     print("Floating point error (%s), with flag %s" % (type, flag))
  → [Manual print statements] rad 286: ...         print("LOG: %s" % msg)
  → [Manual print statements] rad 346: ...     print("Floating point error (%s), with flag %s" % (type, flag))

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\numpy\core\tests\test_arrayprint.py
  → [Potentially suspicious eval() usage] rad 328: assert_equal(eval(repr(a), vars(np)), a)
  → [Potentially suspicious eval() usage] rad 329: assert_equal(eval(repr(a[0]), vars(np)), a[0])

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\numpy\core\tests\test_cpu_features.py
  → [Manual print statements] rad 144: print(detected)

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\numpy\core\tests\test_dtype.py
  → [Potentially suspicious eval() usage] rad 998: assert_equal(np.dtype(eval(str(dt))), dt)

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\numpy\core\tests\test_errstate.py
  → [Manual print statements] rad 46: print(args)

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\numpy\core\tests\test_multiarray.py
  → [Potentially suspicious eval() usage] rad 1484: assert_array_equal(eval(repr(xx), dict(array=np.array)), xx)
  → [Potentially suspicious eval() usage] rad 3792: MyType = eval("type('MyType', (base,), class_namespace)",

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\numpy\core\tests\test_print.py
  → [Manual print statements] rad 109: print(tp(x))
  → [Manual print statements] rad 112: print(ref)
  → [Manual print statements] rad 114: print(x)

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\numpy\core\tests\test_records.py
  → [Potentially suspicious eval() usage] rad 149: recordarr_r = eval("numpy." + repr(recordarr), {'numpy': np})
  → [Potentially suspicious eval() usage] rad 150: recarr_r = eval("numpy." + repr(recarr), {'numpy': np})
  → [Potentially suspicious eval() usage] rad 151: recordview_r = eval("numpy." + repr(recordview), {'numpy': np})

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\numpy\core\tests\test_scalarmath.py
  → [Potentially suspicious eval() usage] rad 616: #            val2 = eval(val_repr)
  → [Potentially suspicious eval() usage] rad 642: val2 = t(eval(val_repr))

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\numpy\core\tests\test_scalarprint.py
  → [Manual print statements] rad 58: print(x, file=f)

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\numpy\core\tests\test_simd.py
  → [Potentially suspicious eval() usage] rad 239: func = eval(intrin)
  → [Potentially suspicious eval() usage] rad 505: func = eval(intrin[:3])
  → [Potentially suspicious eval() usage] rad 635: func = eval(intrin)
  → [Potentially suspicious eval() usage] rad 696: npyv_load_tillz, npyv_load_till = eval(intrin)
  → [Potentially suspicious eval() usage] rad 716: npyv_store_till = eval(intrin)
  → [Potentially suspicious eval() usage] rad 736: npyv_loadn = eval(intrin)
  → [Potentially suspicious eval() usage] rad 762: npyv_loadn_tillz, npyv_loadn_till = eval(intrin)
  → [Potentially suspicious eval() usage] rad 799: npyv_storen = eval(intrin)
  → [Potentially suspicious eval() usage] rad 838: npyv_storen_till = eval(intrin)
  → [Potentially suspicious eval() usage] rad 890: intrin = eval(intrin)
  → [Potentially suspicious eval() usage] rad 1096: func = eval(intrin)

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\numpy\core\tests\test_umath.py
  → [Potentially suspicious eval() usage] rad 488: a, b, divisors = eval(ex_val)
  → [Potentially suspicious eval() usage] rad 552: a = eval(ex_val)

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\numpy\core\tests\test_umath_accuracy.py
  → [Potentially suspicious eval() usage] rad 60: inval  = np.array(str_to_float(data_subset['input'].astype(str), data_subset['type'].astype(str)), dtype=eval(datatype))
  → [Potentially suspicious eval() usage] rad 61: outval = np.array(str_to_float(data_subset['output'].astype(str), data_subset['type'].astype(str)), dtype=eval(datatype))

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\numpy\f2py\auxfuncs.py
  → [Potentially suspicious eval() usage] rad 607: return eval('%s:%s' % (l1, ' and '.join(l2)))
  → [Potentially suspicious eval() usage] rad 615: return eval('%s:%s' % (l1, ' or '.join(l2)))
  → [Potentially suspicious eval() usage] rad 619: return eval('lambda v,f=f:not f(v)')

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\numpy\f2py\capi_maps.py
  → [Potentially suspicious eval() usage] rad 157: d = eval(f.read().lower(), {}, {})
  → [Potentially suspicious eval() usage] rad 295: ret['size'] = repr(eval(ret['size']))
  → [Potentially suspicious eval() usage] rad 451: v = eval(v, {}, {})

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\numpy\f2py\cfuncs.py
  → [Manual print statements] rad 1527: print(n, saveout)

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\numpy\f2py\crackfortran.py
  → [Manual print statements] rad 962: print(line, m1)
  → [Manual print statements] rad 1250: print(m.groupdict())
  → [Potentially suspicious eval() usage] rad 1334: v = eval(initexpr, {}, params)
  → [Manual print statements] rad 1563: print(m.groupdict())
  → [Manual print statements] rad 1586: print(m.groupdict())
  → [Potentially suspicious eval() usage] rad 2303: r = eval(e, g, l)
  → [Manual print statements] rad 2576: print(vars[n])
  → [Potentially suspicious eval() usage] rad 2595: value = eval(value, {}, params)
  → [Potentially suspicious eval() usage] rad 2673: l = str(eval(l, {}, params))
  → [Potentially suspicious eval() usage] rad 2682: l = str(eval(l, {}, params))
  → [Potentially suspicious eval() usage] rad 2950: kindselect['kind'] = eval(
  → [Potentially suspicious eval() usage] rad 3021: p = eval(v, g_params, params)
  → [Potentially suspicious eval() usage] rad 3052: item = eval(item, g_params, params)
  → [Potentially suspicious eval() usage] rad 3510: v = eval(v)

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\numpy\f2py\diagnose.py
  → [Manual print statements] rad 8: print('Running %r:' % (cmd))
  → [Manual print statements] rad 10: print('------')
  → [Manual print statements] rad 16: print('------')
  → [Manual print statements] rad 17: print('os.name=%r' % (os.name))
  → [Manual print statements] rad 18: print('------')
  → [Manual print statements] rad 19: print('sys.platform=%r' % (sys.platform))
  → [Manual print statements] rad 20: print('------')
  → [Manual print statements] rad 21: print('sys.version:')
  → [Manual print statements] rad 22: print(sys.version)
  → [Manual print statements] rad 23: print('------')
  → [Manual print statements] rad 24: print('sys.prefix:')
  → [Manual print statements] rad 25: print(sys.prefix)
  → [Manual print statements] rad 26: print('------')
  → [Manual print statements] rad 27: print('sys.path=%r' % (':'.join(sys.path)))
  → [Manual print statements] rad 28: print('------')
  → [Manual print statements] rad 34: print('Failed to import new numpy:', e)
  → [Manual print statements] rad 41: print('Failed to import f2py2e:', e)
  → [Manual print statements] rad 52: print('Failed to import numpy_distutils:', e)
  → [Manual print statements] rad 57: print('Found new numpy version %r in %s' %
  → [Manual print statements] rad 60: print('error:', msg)
  → [Manual print statements] rad 61: print('------')
  → [Manual print statements] rad 65: print('Found f2py2e version %r in %s' %
  → [Manual print statements] rad 68: print('error:', msg)
  → [Manual print statements] rad 69: print('------')
  → [Manual print statements] rad 74: print('Found numpy.distutils version %r in %r' % (
  → [Manual print statements] rad 78: print('Found numpy_distutils version %r in %r' % (
  → [Manual print statements] rad 81: print('------')
  → [Manual print statements] rad 83: print('error:', msg)
  → [Manual print statements] rad 84: print('------')
  → [Manual print statements] rad 87: print(
  → [Manual print statements] rad 90: print('ok')
  → [Manual print statements] rad 91: print('------')
  → [Manual print statements] rad 93: print(
  → [Manual print statements] rad 97: print('------')
  → [Manual print statements] rad 99: print('error:', msg)
  → [Manual print statements] rad 100: print('------')
  → [Manual print statements] rad 102: print(
  → [Manual print statements] rad 104: print('------')
  → [Manual print statements] rad 107: print('Importing numpy.distutils.fcompiler ...', end=' ')
  → [Manual print statements] rad 110: print('Importing numpy_distutils.fcompiler ...', end=' ')
  → [Manual print statements] rad 112: print('ok')
  → [Manual print statements] rad 113: print('------')
  → [Manual print statements] rad 115: print('Checking availability of supported Fortran compilers:')
  → [Manual print statements] rad 117: print('------')
  → [Manual print statements] rad 119: print('error:', msg)
  → [Manual print statements] rad 120: print('------')
  → [Manual print statements] rad 122: print('error:', msg)
  → [Manual print statements] rad 123: print('------')
  → [Manual print statements] rad 126: print('Importing numpy.distutils.cpuinfo ...', end=' ')
  → [Manual print statements] rad 128: print('ok')
  → [Manual print statements] rad 129: print('------')
  → [Manual print statements] rad 132: print(
  → [Manual print statements] rad 135: print('ok')
  → [Manual print statements] rad 136: print('------')
  → [Manual print statements] rad 138: print('error:', msg, '(ignore it)')
  → [Manual print statements] rad 139: print('Importing numpy_distutils.cpuinfo ...', end=' ')
  → [Manual print statements] rad 141: print('ok')
  → [Manual print statements] rad 142: print('------')
  → [Manual print statements] rad 144: print('CPU information:', end=' ')
  → [Manual print statements] rad 147: print(name[1:], end=' ')
  → [Manual print statements] rad 148: print('------')
  → [Manual print statements] rad 150: print('error:', msg)
  → [Manual print statements] rad 151: print('------')

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\numpy\f2py\f2py2e.py
  → [Manual print statements] rad 256: print(f2py_version)
  → [Manual print statements] rad 298: print(__usage__)
  → [Manual print statements] rad 664: print('Unknown vendor: "%s"' % (s[len(v):]))
  → [Manual print statements] rad 705: print('Invalid use of -D:', name_value)

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\numpy\f2py\rules.py
  → [Manual print statements] rad 1264: print(

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\numpy\f2py\use_rules.py
  → [Manual print statements] rad 104: print(name, realname, vars[realname])

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\numpy\f2py\_src_pyf.py
  → [Manual print statements] rad 168: print("Mismatch in number of replacements (base <{}={}>) "

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\numpy\f2py\__init__.py
  → [Manual print statements] rad 121: print(cp.stdout.decode())

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\numpy\f2py\tests\test_data.py
  → [Manual print statements] rad 46: print(mod[0]['vars'])

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\numpy\f2py\tests\util.py
  → [Manual print statements] rad 232: print('COMPILERS:%%d,%%d,%%d' %% (have_c,

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\numpy\f2py\_backends\_distutils.py
  → [Manual print statements] rad 44: print(
  → [Manual print statements] rad 74: print(f"Removing build directory {self.build_dir}")

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\numpy\lib\arrayterator.py
  → [Manual print statements] rad 79: ...         print(subarr, subarr.shape) # doctest: +SKIP
  → [Manual print statements] rad 156: ...         print(subarr, type(subarr))

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\numpy\lib\function_base.py
  → [Manual print statements] rad 501: >>> print(avg.dtype)
  → [Manual print statements] rad 623: ...     print('ValueError')
  → [Manual print statements] rad 5701: ...   print(bins[inds[n]-1], "<=", x[n], "<", bins[inds[n]])

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\numpy\lib\index_tricks.py
  → [Manual print statements] rad 589: ...     print(index, x)
  → [Manual print statements] rad 642: ...     print(index)
  → [Manual print statements] rad 653: ...     print(index)

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\numpy\lib\npyio.py
  → [Manual print statements] rad 533: >>> print(a, b)
  → [Manual print statements] rad 704: >>> print(np.array_equal(test_array, loaded['a']))
  → [Manual print statements] rad 706: >>> print(np.array_equal(test_vector, loaded['b']))

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\numpy\lib\polynomial.py
  → [Manual print statements] rad 829: >>> print(p1)
  → [Manual print statements] rad 831: >>> print(p2)
  → [Manual print statements] rad 834: >>> print(np.polyadd(p1, p2))
  → [Manual print statements] rad 954: >>> print(p1)
  → [Manual print statements] rad 957: >>> print(p2)
  → [Manual print statements] rad 960: >>> print(np.polymul(p1, p2))
  → [Manual print statements] rad 1113: >>> print(np.poly1d(p))
  → [Manual print statements] rad 1169: >>> print(p)

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\numpy\lib\recfunctions.py
  → [Manual print statements] rad 810: ...     print("offsets:", [d.fields[name][1] for name in d.names])
  → [Manual print statements] rad 811: ...     print("itemsize:", d.itemsize)

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\numpy\lib\type_check.py
  → [Manual print statements] rad 636: ...     print(typechar, ' : ', np.typename(typechar))

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\numpy\lib\user_array.py
  → [Manual print statements] rad 274: print(dir(ua))
  → [Manual print statements] rad 275: print(shape(ua), ua.shape)  # I have changed Numeric.py
  → [Manual print statements] rad 278: print(ua_small)
  → [Manual print statements] rad 281: print(ua_small[0, 0], ua[0, 0])
  → [Manual print statements] rad 282: print(sin(ua_small) / 3. * 6. + sqrt(ua_small ** 2))
  → [Manual print statements] rad 283: print(less(ua_small, 103), type(less(ua_small, 103)))
  → [Manual print statements] rad 284: print(type(ua_small * reshape(arange(15), shape(ua_small))))
  → [Manual print statements] rad 285: print(reshape(ua_small, (5, 3)))
  → [Manual print statements] rad 286: print(transpose(ua_small))

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\numpy\lib\utils.py
  → [Manual print statements] rad 68: print("WARNING: `threadpoolctl` not found in system!"
  → [Manual print statements] rad 411: print(prval + "\n" + "="*(len(prval)+5) + "\n")
  → [Manual print statements] rad 414: print("%s %s %s %s %s %s %s" % (val[0], ' '*(sp1-len(val[0])+4),
  → [Manual print statements] rad 418: print("\nUpper bound on total bytes  =       %d" % totalbytes)
  → [Manual print statements] rad 503: print("class: ", nm, file=output)
  → [Manual print statements] rad 504: print("shape: ", obj.shape, file=output)
  → [Manual print statements] rad 505: print("strides: ", strides, file=output)
  → [Manual print statements] rad 506: print("itemsize: ", obj.itemsize, file=output)
  → [Manual print statements] rad 507: print("aligned: ", bp(obj.flags.aligned), file=output)
  → [Manual print statements] rad 508: print("contiguous: ", bp(obj.flags.contiguous), file=output)
  → [Manual print statements] rad 509: print("fortran: ", obj.flags.fortran, file=output)
  → [Manual print statements] rad 510: print(
  → [Manual print statements] rad 514: print("byteorder: ", end=' ', file=output)
  → [Manual print statements] rad 516: print("%s%s%s" % (tic, sys.byteorder, tic), file=output)
  → [Manual print statements] rad 519: print("%sbig%s" % (tic, tic), file=output)
  → [Manual print statements] rad 522: print("%slittle%s" % (tic, tic), file=output)
  → [Manual print statements] rad 524: print("byteswap: ", bp(byteswap), file=output)
  → [Manual print statements] rad 525: print("type: %s" % obj.dtype, file=output)
  → [Manual print statements] rad 623: print("\n     "
  → [Manual print statements] rad 629: print("     *** Found in %s ***" % namestr, file=output)
  → [Manual print statements] rad 631: print("-"*maxwidth, file=output)
  → [Manual print statements] rad 636: print("Help for %s not found." % object, file=output)
  → [Manual print statements] rad 638: print("\n     "
  → [Manual print statements] rad 655: print(" " + argstr + "\n", file=output)
  → [Manual print statements] rad 656: print(inspect.getdoc(object), file=output)
  → [Manual print statements] rad 670: print(" " + argstr + "\n", file=output)
  → [Manual print statements] rad 674: print(inspect.getdoc(object.__init__), file=output)
  → [Manual print statements] rad 676: print(inspect.getdoc(object), file=output)
  → [Manual print statements] rad 682: print("\n\nMethods:\n", file=output)
  → [Manual print statements] rad 689: print("  %s  --  %s" % (meth, methstr), file=output)
  → [Manual print statements] rad 692: print(inspect.getdoc(object), file=output)
  → [Manual print statements] rad 738: print("In file: %s\n" % inspect.getsourcefile(object), file=output)
  → [Manual print statements] rad 739: print(inspect.getsource(object), file=output)
  → [Manual print statements] rad 741: print("Not available for this object.", file=output)
  → [Manual print statements] rad 876: print("\n".join(help_text))

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\numpy\lib\_version.py
  → [Manual print statements] rad 45: ...     print('skip')

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\numpy\lib\tests\test_format.py
  → [Manual print statements] rad 114: ...     print(repr(f.getvalue()))

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\numpy\ma\core.py
  → [Manual print statements] rad 2618: ...     print(item)
  → [Manual print statements] rad 3177: by ``print(a)``). It also depends on exactly how ``a`` is stored in
  → [Manual print statements] rad 5165: >>> print(type(x.sum(axis=0, dtype=np.int64)[0]))

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\numpy\ma\extras.py
  → [Manual print statements] rad 1706: ...     print(index, x)
  → [Manual print statements] rad 1715: ...     print(index, x)
  → [Manual print statements] rad 1774: >>> print(np.ma.flatnotmasked_edges(a))

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\numpy\ma\timer_comparison.py
  → [Manual print statements] rad 441: print("#%i" % i + 50*'.')
  → [Manual print statements] rad 442: print(eval("ModuleTester.test_%i.__doc__" % i))
  → [Potentially suspicious eval() usage] rad 442: print(eval("ModuleTester.test_%i.__doc__" % i))
  → [Manual print statements] rad 443: print(f'core_current : {cur[0]:.3f} - {cur[1]:.3f}')

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\numpy\ma\tests\test_old_ma.py
  → [Manual print statements] rad 32: print(f'Not eq:{msg}\n{v}\n----{w}')

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\numpy\polynomial\_polybase.py
  → [Manual print statements] rad 691: >>> print(poly)
  → [Manual print statements] rad 700: >>> print(poly)

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\numpy\polynomial\__init__.py
  → [Manual print statements] rad 158: >>> print(p)
  → [Manual print statements] rad 160: >>> print(c)
  → [Manual print statements] rad 163: >>> print(p)
  → [Manual print statements] rad 165: >>> print(c)
  → [Manual print statements] rad 168: >>> print(f"{p:unicode}")

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\numpy\random\tests\test_randomstate.py
  → [Manual print statements] rad 2082: print(state)
  → [Manual print statements] rad 2083: print(new_state)

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\numpy\random\_examples\numba\extending.py
  → [Manual print statements] rad 47: print(f'{t1:.2f} secs for {n} PCG64 (Numba/PCG64) gaussian randoms')
  → [Manual print statements] rad 49: print(f'{t2:.2f} secs for {n} PCG64 (NumPy/PCG64) gaussian randoms')
  → [Manual print statements] rad 72: print(bounded_uint(323, 2394691, ctypes_state.value))

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\numpy\random\_examples\numba\extending_distributions.py
  → [Manual print statements] rad 67: print(norm[:12])

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\numpy\testing\print_coercion_tables.py
  → [Manual print statements] rad 22: print('X', end=' ')
  → [Manual print statements] rad 24: print(char, end=' ')
  → [Manual print statements] rad 25: print()
  → [Manual print statements] rad 27: print(row, end=' ')
  → [Manual print statements] rad 39: print(cast, end=' ')
  → [Manual print statements] rad 40: print()
  → [Manual print statements] rad 43: print('+', end=' ')
  → [Manual print statements] rad 45: print(char, end=' ')
  → [Manual print statements] rad 46: print()
  → [Manual print statements] rad 53: print(row, end=' ')
  → [Manual print statements] rad 79: print(char, end=' ')
  → [Manual print statements] rad 80: print()
  → [Manual print statements] rad 147: print('X', end=' ')
  → [Manual print statements] rad 149: print(np.dtype(dt.type).char, end=' ')
  → [Manual print statements] rad 150: print()
  → [Manual print statements] rad 152: print(np.dtype(from_dt.type).char, end=' ')
  → [Manual print statements] rad 155: print(getattr(row.get(to_dt, no_cast_info), field), end=' ')
  → [Manual print statements] rad 156: print()
  → [Manual print statements] rad 160: print()
  → [Manual print statements] rad 161: print("Casting: # is equivalent, = is safe, ~ is same-kind, and . is unsafe")
  → [Manual print statements] rad 162: print()
  → [Manual print statements] rad 166: print()
  → [Manual print statements] rad 167: print("L denotes a legacy cast . a non-legacy one.")
  → [Manual print statements] rad 168: print()
  → [Manual print statements] rad 172: print()
  → [Manual print statements] rad 173: print(f"{flags_table[0]}: no flags, {flags_table[1]}: PyAPI, "
  → [Manual print statements] rad 175: print()
  → [Manual print statements] rad 180: print("can cast")
  → [Manual print statements] rad 182: print()
  → [Manual print statements] rad 183: print("In these tables, ValueError is '!', OverflowError is '@', TypeError is '#'")
  → [Manual print statements] rad 184: print()
  → [Manual print statements] rad 185: print("scalar + scalar")
  → [Manual print statements] rad 187: print()
  → [Manual print statements] rad 188: print("scalar + neg scalar")
  → [Manual print statements] rad 190: print()
  → [Manual print statements] rad 191: print("array + scalar")
  → [Manual print statements] rad 193: print()
  → [Manual print statements] rad 194: print("array + neg scalar")
  → [Manual print statements] rad 196: print()
  → [Manual print statements] rad 197: print("promote_types")
  → [Manual print statements] rad 199: print("New casting type promotion:")

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\numpy\testing\_private\utils.py
  → [Manual print statements] rad 1395: >>> print("Time for a single execution : ", etime / times, "s")  # doctest: +SKIP

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\numpy\tests\test_ctypeslib.py
  → [Manual print statements] rad 62: print(msg)

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\numpy\tests\test_public_api.py
  → [Manual print statements] rad 412: print(obj)
  → [Potentially suspicious eval() usage] rad 470: eval(module_name)

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\numpy\_pyinstaller\pyinstaller-smoke.py
  → [Manual print statements] rad 32: print("I made it!")

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\numpy\_typing\_add_docstring.py
  → [Manual print statements] rad 138: >>> print(npt.NDArray)
  → [Manual print statements] rad 141: >>> print(npt.NDArray[np.float64])

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\packaging\tags.py
  → [Manual print statements] rad 419: "import platform; print(platform.mac_ver()[0])",

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\packaging\version.py
  → [Manual print statements] rad 298: >>> print(Version("1.2.3").pre)
  → [Manual print statements] rad 313: >>> print(Version("1.2.3").post)
  → [Manual print statements] rad 324: >>> print(Version("1.2.3").dev)
  → [Manual print statements] rad 335: >>> print(Version("1.2.3").local)

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\packaging\_musllinux.py
  → [Manual print statements] rad 81: print("plat:", plat)
  → [Manual print statements] rad 82: print("musl:", _get_musl_version(sys.executable))
  → [Manual print statements] rad 83: print("tags:", end=" ")
  → [Manual print statements] rad 85: print(t, end="\n      ")

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\packaging\licenses\__init__.py
  → [Potentially suspicious eval() usage] rad 100: invalid = eval(python_expression, globals(), locals())

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\passlib\crypto\digest.py
  → [Potentially suspicious eval() usage] rad 1000: eval(code, gdict, ldict)

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\passlib\tests\tox_support.py
  → [Manual print statements] rad 30: print(TH_PATH)

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\passlib\tests\utils.py
  → [Manual print statements] rad 616: # XXX: would it be better to print() this?

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\PIL\features.py
  → [Manual print statements] rad 245: print("-" * 68, file=out)
  → [Manual print statements] rad 246: print(f"Pillow {PIL.__version__}", file=out)
  → [Manual print statements] rad 248: print(f"Python {py_version[0].strip()}", file=out)
  → [Manual print statements] rad 250: print(f"       {py_version.strip()}", file=out)
  → [Manual print statements] rad 251: print("-" * 68, file=out)
  → [Manual print statements] rad 252: print(
  → [Manual print statements] rad 256: print(
  → [Manual print statements] rad 260: print("-" * 68, file=out)
  → [Manual print statements] rad 295: print("---", feature, "support ok,", t, v, file=out)
  → [Manual print statements] rad 297: print("---", feature, "support ok", file=out)
  → [Manual print statements] rad 299: print("***", feature, "support not installed", file=out)
  → [Manual print statements] rad 300: print("-" * 68, file=out)
  → [Manual print statements] rad 311: print(line, file=out)
  → [Manual print statements] rad 314: print(
  → [Manual print statements] rad 330: print("Features: {}".format(", ".join(features)), file=out)
  → [Manual print statements] rad 331: print("-" * 68, file=out)

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\PIL\GifImagePlugin.py
  → [Potentially suspicious eval() usage] rad 657: mask = ImageMath.eval(
  → [Potentially suspicious eval() usage] rad 670: mask = ImageMath.eval("convert(im * 255, '1')", im=delta)

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\PIL\IcnsImagePlugin.py
  → [Manual print statements] rad 389: print("Syntax: python3 IcnsImagePlugin.py [file]")

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\PIL\Image.py
  → [Potentially suspicious eval() usage] rad 3371: def eval(image, *args):
  → [Manual print statements] rad 3638: print(exif[274])  # 1
  → [Manual print statements] rad 3641: print("Tag", k, "Value", v)  # Tag 274 Value 2
  → [Manual print statements] rad 3651: print(gps_ifd)
  → [Manual print statements] rad 3658: print(exif[ExifTags.Base.Software])  # PIL
  → [Manual print statements] rad 3659: print(gps_ifd[ExifTags.GPS.GPSDateStamp])  # 1999:99:99 99:99:99

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\PIL\ImageMath.py
  → [Potentially suspicious eval() usage] rad 222: def eval(expression, _dict={}, **kw):
  → [Potentially suspicious eval() usage] rad 261: out = builtins.eval(expression, {"__builtins": {"abs": abs}}, args)

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\PIL\ImageShow.py
  → [Manual print statements] rad 322: print("Syntax: python3 ImageShow.py imagefile [title]")
  → [Manual print statements] rad 326: print(show(im, *sys.argv[2:]))

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\PIL\IptcImagePlugin.py
  → [Manual print statements] rad 60: print("%02x" % _i8(i), end=" ")
  → [Manual print statements] rad 61: print()

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\PIL\SpiderImagePlugin.py
  → [Manual print statements] rad 214: print(f"unable to find {img}")
  → [Manual print statements] rad 221: print(img + " is not a Spider image file")
  → [Manual print statements] rad 293: print("Syntax: python3 SpiderImagePlugin.py [infile] [outfile]")
  → [Manual print statements] rad 298: print("input image must be in Spider format")
  → [Manual print statements] rad 302: print("image: " + str(im))
  → [Manual print statements] rad 303: print("format: " + str(im.format))
  → [Manual print statements] rad 304: print("size: " + str(im.size))
  → [Manual print statements] rad 305: print("mode: " + str(im.mode))
  → [Manual print statements] rad 306: print("max, min: ", end=" ")
  → [Manual print statements] rad 307: print(im.getextrema())
  → [Manual print statements] rad 314: print(

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\PIL\TiffImagePlugin.py
  → [Manual print statements] rad 405: print("\n".join("__%s__ = _delegate('__%s__')" % (s,s) for s in a))
  → [Manual print statements] rad 448: print(ifd[key])
  → [Manual print statements] rad 979: print(ifd[key])

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\pip\_internal\cli\autocompletion.py
  → [Manual print statements] rad 63: print(dist)
  → [Manual print statements] rad 71: print(path)
  → [Manual print statements] rad 103: print(opt_label)
  → [Manual print statements] rad 120: print(" ".join([x for x in subcommands if x.startswith(current)]))

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\pip\_internal\cli\base_command.py
  → [Manual print statements] rad 135: print("ERROR: Pipe to stdout was broken", file=sys.stderr)

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\pip\_internal\cli\parser.py
  → [Manual print statements] rad 175: print(f"An error occurred during configuration: {exc}")

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\pip\_internal\commands\completion.py
  → [Manual print statements] rad 124: print(BASE_COMPLETION.format(script=script, shell=options.shell))

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\pip\_internal\utils\glibc.py
  → [Manual print statements] rad 77: #   ~$ python2.7 -c 'import platform; print(platform.libc_ver())'
  → [Manual print statements] rad 79: #   ~$ python3.5 -c 'import platform; print(platform.libc_ver())'

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\pip\_internal\utils\logging.py
  → [Manual print statements] rad 177: self.console.print(renderable, overflow="ignore", crop=False, style=style)

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\pip\_internal\utils\misc.py
  → [Manual print statements] rad 231: print(

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\pip\_internal\utils\setuptools_build.py
  → [Manual print statements] rad 25: print(

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\pip\_vendor\typing_extensions.py
  → [Potentially suspicious eval() usage] rad 1215: (unless you are familiar with how eval() and exec() work).  The
  → [Manual print statements] rad 2153: print("It's an int")
  → [Manual print statements] rad 2155: print("It's a str")
  → [Manual print statements] rad 2559: print(f"Runtime type is {type(obj).__name__!r}", file=sys.stderr)
  → [Manual print statements] rad 2580: print("It's an int")
  → [Manual print statements] rad 2582: print("It's a str")

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\pip\_vendor\cachecontrol\_cmd.py
  → [Manual print statements] rad 64: print("Cached!")
  → [Manual print statements] rad 66: print("Not cached :(")

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\pip\_vendor\certifi\__main__.py
  → [Manual print statements] rad 10: print(contents())
  → [Manual print statements] rad 12: print(where())

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\pip\_vendor\distlib\locators.py
  → [Potential debug 'import pdb'] rad 1245: # import pdb; pdb.set_trace()

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\pip\_vendor\distlib\metadata.py
  → [Potential debug 'import pdb'] rad 635: # import pdb; pdb.set_trace()
  → [Potential debug 'import pdb'] rad 962: # import pdb; pdb.set_trace()

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\pip\_vendor\distlib\util.py
  → [Potential debug 'import pdb'] rad 1376: # import pdb; pdb.set_trace()
  → [Potential debug 'import pdb'] rad 1384: # import pdb; pdb.set_trace()
  → [Potential debug 'import pdb'] rad 1859: # import pdb; pdb.set_trace()

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\pip\_vendor\distlib\version.py
  → [Potential debug 'import pdb'] rad 111: # import pdb; pdb.set_trace()
  → [Potential debug 'import pdb'] rad 428: # import pdb; pdb.set_trace()
  → [Potential debug 'import pdb'] rad 446: # import pdb; pdb.set_trace()

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\pip\_vendor\packaging\tags.py
  → [Manual print statements] rad 420: "import platform; print(platform.mac_ver()[0])",

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\pip\_vendor\packaging\version.py
  → [Manual print statements] rad 298: >>> print(Version("1.2.3").pre)
  → [Manual print statements] rad 313: >>> print(Version("1.2.3").post)
  → [Manual print statements] rad 324: >>> print(Version("1.2.3").dev)
  → [Manual print statements] rad 335: >>> print(Version("1.2.3").local)

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\pip\_vendor\packaging\_musllinux.py
  → [Manual print statements] rad 81: print("plat:", plat)
  → [Manual print statements] rad 82: print("musl:", _get_musl_version(sys.executable))
  → [Manual print statements] rad 83: print("tags:", end=" ")
  → [Manual print statements] rad 85: print(t, end="\n      ")

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\pip\_vendor\pkg_resources\__init__.py
  → [Manual print statements] rad 982: print('Could not load', errors)

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\pip\_vendor\platformdirs\__main__.py
  → [Manual print statements] rad 31: print(f"-- platformdirs {__version__} --")  # noqa: T201
  → [Manual print statements] rad 33: print("-- app dirs (with optional 'version')")  # noqa: T201
  → [Manual print statements] rad 36: print(f"{prop}: {getattr(dirs, prop)}")  # noqa: T201
  → [Manual print statements] rad 38: print("\n-- app dirs (without optional 'version')")  # noqa: T201
  → [Manual print statements] rad 41: print(f"{prop}: {getattr(dirs, prop)}")  # noqa: T201
  → [Manual print statements] rad 43: print("\n-- app dirs (without optional 'appauthor')")  # noqa: T201
  → [Manual print statements] rad 46: print(f"{prop}: {getattr(dirs, prop)}")  # noqa: T201
  → [Manual print statements] rad 48: print("\n-- app dirs (with disabled 'appauthor')")  # noqa: T201
  → [Manual print statements] rad 51: print(f"{prop}: {getattr(dirs, prop)}")  # noqa: T201

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\pip\_vendor\pygments\cmdline.py
  → [Manual print statements] rad 71: print(f"Help on the {cls.name} lexer:")
  → [Manual print statements] rad 72: print(dedent(cls.__doc__))
  → [Manual print statements] rad 75: print(f"Help on the {cls.name} formatter:")
  → [Manual print statements] rad 76: print(dedent(cls.__doc__))
  → [Manual print statements] rad 79: print(f"Help on the {name} filter:")
  → [Manual print statements] rad 80: print(dedent(cls.__doc__))
  → [Manual print statements] rad 83: print(f"{what} not found!", file=sys.stderr)
  → [Manual print statements] rad 89: print()
  → [Manual print statements] rad 90: print("Lexers:")
  → [Manual print statements] rad 91: print("~~~~~~~")
  → [Manual print statements] rad 100: print(('* {}\n    {} {}').format(*i))
  → [Manual print statements] rad 103: print()
  → [Manual print statements] rad 104: print("Formatters:")
  → [Manual print statements] rad 105: print("~~~~~~~~~~~")
  → [Manual print statements] rad 115: print(('* {}\n    {} {}').format(*i))
  → [Manual print statements] rad 118: print()
  → [Manual print statements] rad 119: print("Filters:")
  → [Manual print statements] rad 120: print("~~~~~~~~")
  → [Manual print statements] rad 124: print("* " + name + ':')
  → [Manual print statements] rad 125: print(f"    {docstring_headline(cls)}")
  → [Manual print statements] rad 128: print()
  → [Manual print statements] rad 129: print("Styles:")
  → [Manual print statements] rad 130: print("~~~~~~~")
  → [Manual print statements] rad 134: print("* " + name + ':')
  → [Manual print statements] rad 135: print(f"    {docstring_headline(cls)}")
  → [Manual print statements] rad 188: print(f'Pygments version {__version__}, (c) 2006-2024 by Georg Brandl, Matthäus '
  → [Manual print statements] rad 259: print(lexer.aliases[0])
  → [Manual print statements] rad 270: print(lexer.aliases[0])
  → [Manual print statements] rad 289: print(err, file=sys.stderr)
  → [Manual print statements] rad 292: print(fmter.get_style_defs(a_opt or ''))
  → [Manual print statements] rad 331: print('Error:', err, file=sys.stderr)
  → [Manual print statements] rad 337: print('Error:', err, file=sys.stderr)
  → [Manual print statements] rad 345: print('Error: -s option not usable when input file specified',
  → [Manual print statements] rad 354: print('Error: cannot read infile:', err, file=sys.stderr)
  → [Manual print statements] rad 370: print('Error:', err, file=sys.stderr)
  → [Manual print statements] rad 373: print('Error:', err, file=sys.stderr)
  → [Manual print statements] rad 391: print('Error: when using -s a lexer has to be selected with -l',
  → [Manual print statements] rad 400: print('Error:', err, file=sys.stderr)
  → [Manual print statements] rad 425: print('Error:', err, file=sys.stderr)
  → [Manual print statements] rad 431: print('Error:', err, file=sys.stderr)
  → [Manual print statements] rad 439: print('Error:', err, file=sys.stderr)
  → [Manual print statements] rad 444: print('Error: cannot open outfile:', err, file=sys.stderr)
  → [Manual print statements] rad 646: print(file=sys.stderr)
  → [Manual print statements] rad 647: print('*' * 65, file=sys.stderr)
  → [Manual print statements] rad 648: print('An unhandled exception occurred while highlighting.',
  → [Manual print statements] rad 650: print('Please report the whole traceback to the issue tracker at',
  → [Manual print statements] rad 652: print('<https://github.com/pygments/pygments/issues>.',
  → [Manual print statements] rad 654: print('*' * 65, file=sys.stderr)
  → [Manual print statements] rad 655: print(file=sys.stderr)
  → [Manual print statements] rad 663: print(file=sys.stderr)
  → [Manual print statements] rad 664: print('*** Error while highlighting:', file=sys.stderr)
  → [Manual print statements] rad 665: print(msg, file=sys.stderr)
  → [Manual print statements] rad 666: print('*** If this is a bug you want to report, please rerun with -v.',

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\pip\_vendor\pygments\lexer.py
  → [Manual print statements] rad 955: print()
  → [Manual print statements] rad 956: print('Profiling result for %s lexing %d chars in %.3f ms' %
  → [Manual print statements] rad 958: print('=' * 110)
  → [Manual print statements] rad 959: print('%-20s %-64s ncalls  tottime  percall' % ('state', 'regex'))
  → [Manual print statements] rad 960: print('-' * 110)
  → [Manual print statements] rad 962: print('%-20s %-65s %5d %8.4f %8.4f' % d)
  → [Manual print statements] rad 963: print('=' * 110)

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\pip\_vendor\pygments\sphinxext.py
  → [Manual print statements] rad 165: print(f"Warning: {classname} does not have a docstring.")

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\pip\_vendor\pygments\formatters\html.py
  → [Manual print statements] rad 628: print('Note: Cannot determine output file name, '

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\pip\_vendor\pygments\formatters\__init__.py
  → [Potentially suspicious eval() usage] rad 91: this method is equivalent to running ``eval()`` on the input file. The formatter is

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\pip\_vendor\pygments\lexers\python.py
  → [Manual print statements] rad 681: >>> print(a)

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\pip\_vendor\pyproject_hooks\_in_process\_in_process.py
  → [Manual print statements] rad 228: print('Found wheel built marker, but no .whl files')
  → [Manual print statements] rad 231: print('Found multiple .whl files; unspecified behaviour. '

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\pip\_vendor\requests\certs.py
  → [Manual print statements] rad 24: print(where())

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\pip\_vendor\requests\help.py
  → [Manual print statements] rad 123: print(json.dumps(info(), sort_keys=True, indent=2))

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\pip\_vendor\requests\__init__.py
  → [Manual print statements] rad 24: >>> print(r.text)

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\pip\_vendor\rich\abc.py
  → [Manual print statements] rad 11: console.print(my_object)
  → [Manual print statements] rad 25: print(isinstance(Text, RichRenderable))
  → [Manual print statements] rad 26: print(isinstance(t, RichRenderable))
  → [Manual print statements] rad 32: print(isinstance(f, RichRenderable))
  → [Manual print statements] rad 33: print(isinstance("", RichRenderable))

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\pip\_vendor\rich\align.py
  → [Manual print statements] rad 309: console.print(

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\pip\_vendor\rich\ansi.py
  → [Manual print statements] rad 235: print(stdout_result)
  → [Manual print statements] rad 238: console.print(line)

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\pip\_vendor\rich\box.py
  → [Manual print statements] rad 463: console.print(Panel("[bold green]Box Constants", style="green"), justify="center")
  → [Manual print statements] rad 464: console.print()
  → [Manual print statements] rad 478: console.print(columns)

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\pip\_vendor\rich\cells.py
  → [Manual print statements] rad 162: print(get_character_cell_size("😽"))
  → [Manual print statements] rad 164: print(line)
  → [Manual print statements] rad 166: print(set_cell_size("""这是对亚洲语言支持的测试。面对模棱两可的想法，拒绝猜测的诱惑。""", n) + "|")
  → [Manual print statements] rad 167: print("x" * n)

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\pip\_vendor\rich\color.py
  → [Manual print statements] rad 621: console.print(table)

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\pip\_vendor\rich\columns.py
  → [Manual print statements] rad 181: console.print(columns)
  → [Manual print statements] rad 184: console.print(columns)
  → [Manual print statements] rad 187: console.print(columns)

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\pip\_vendor\rich\console.py
  → [Manual print statements] rad 443: self.console.print(self.screen, end="")
  → [Manual print statements] rad 1090: """A context manager to *capture* the result of print() or log() in a string,
  → [Manual print statements] rad 1097: ...     console.print("[bold magenta]Hello World[/]")
  → [Manual print statements] rad 1098: >>> print(capture.get())
  → [Manual print statements] rad 1122: console.print(make_test_card())
  → [Manual print statements] rad 1137: self.print(NewLine(count))
  → [Manual print statements] rad 1580: self.print(rule)
  → [Manual print statements] rad 1612: self.print(
  → [Manual print statements] rad 1624: def print(
  → [Manual print statements] rad 1782: self.print(json_renderable, soft_wrap=True)
  → [Manual print statements] rad 1871: self.print(traceback)
  → [Manual print statements] rad 2116: self.print(prompt, markup=markup, emoji=emoji, end="")
  → [Manual print statements] rad 2600: console.print(

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\pip\_vendor\rich\control.py
  → [Manual print statements] rad 221: console.print("Look at the title of your terminal window ^")
  → [Manual print statements] rad 222: # console.print(Control((ControlType.SET_WINDOW_TITLE, "Hello, world!")))

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\pip\_vendor\rich\default_styles.py
  → [Manual print statements] rad 188: console.print(table)
  → [Manual print statements] rad 190: print(console.export_html(inline_styles=True))

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\pip\_vendor\rich\diagnose.py
  → [Manual print statements] rad 31: console.print(Panel.fit((Pretty(env)), title="[b]Environment Variables"))
  → [Manual print statements] rad 33: console.print(f'platform="{platform.system()}"')

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\pip\_vendor\rich\emoji.py
  → [Manual print statements] rad 94: console.print(columns)

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\pip\_vendor\rich\file_proxy.py
  → [Manual print statements] rad 47: console.print(output)
  → [Manual print statements] rad 53: self.__console.print(output)

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\pip\_vendor\rich\highlighter.py
  → [Manual print statements] rad 205: console.print("[bold green]hello world![/bold green]")
  → [Manual print statements] rad 206: console.print("'[bold green]hello world![/bold green]'")
  → [Manual print statements] rad 208: console.print(" /foo")
  → [Manual print statements] rad 209: console.print("/foo/")
  → [Manual print statements] rad 210: console.print("/foo/bar")
  → [Manual print statements] rad 211: console.print("foo/bar/baz")
  → [Manual print statements] rad 213: console.print("/foo/bar/baz?foo=bar+egg&egg=baz")
  → [Manual print statements] rad 214: console.print("/foo/bar/baz/")
  → [Manual print statements] rad 215: console.print("/foo/bar/baz/egg")
  → [Manual print statements] rad 216: console.print("/foo/bar/baz/egg.py")
  → [Manual print statements] rad 217: console.print("/foo/bar/baz/egg.py word")
  → [Manual print statements] rad 218: console.print(" /foo/bar/baz/egg.py word")
  → [Manual print statements] rad 219: console.print("foo /foo/bar/baz/egg.py word")
  → [Manual print statements] rad 220: console.print("foo /foo/bar/ba._++z/egg+.py word")
  → [Manual print statements] rad 221: console.print("https://example.org?foo=bar#header")
  → [Manual print statements] rad 223: console.print(1234567.34)
  → [Manual print statements] rad 224: console.print(1 / 2)
  → [Manual print statements] rad 225: console.print(-1 / 123123123123)
  → [Manual print statements] rad 227: console.print(

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\pip\_vendor\rich\json.py
  → [Manual print statements] rad 136: error_console.print(f"Unable to read {args.path!r}; {error}")
  → [Manual print statements] rad 139: console.print(JSON(json_data, indent=args.indent), soft_wrap=True)

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\pip\_vendor\rich\jupyter.py
  → [Manual print statements] rad 98: def print(*args: Any, **kwargs: Any) -> None:
  → [Manual print statements] rad 101: return console.print(*args, **kwargs)

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\pip\_vendor\rich\layout.py
  → [Manual print statements] rad 442: console.print(layout)

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\pip\_vendor\rich\live.py
  → [Manual print statements] rad 239: self.console.print(self._live_render.renderable)
  → [Manual print statements] rad 242: self.console.print(Control())
  → [Manual print statements] rad 247: self.console.print(Control())

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\pip\_vendor\rich\logging.py
  → [Manual print statements] rad 170: self.console.print(log_renderable)

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\pip\_vendor\rich\markup.py
  → [Manual print statements] rad 251: print(grid)

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\pip\_vendor\rich\padding.py
  → [Manual print statements] rad 23: >>> print(Padding("Hello", (2, 4), style="on blue"))
  → [Manual print statements] rad 141: print(Padding("Hello, World", (2, 4), style="on blue"))

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\pip\_vendor\rich\pager.py
  → [Manual print statements] rad 34: console.print(make_test_card())

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\pip\_vendor\rich\palette.py
  → [Manual print statements] rad 100: console.print(ColorBox())

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\pip\_vendor\rich\panel.py
  → [Manual print statements] rad 21: >>> console.print(Panel("Hello, World!"))
  → [Manual print statements] rad 311: c.print()
  → [Manual print statements] rad 312: c.print(p)

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\pip\_vendor\rich\pretty.py
  → [Manual print statements] rad 132: console.print(
  → [Manual print statements] rad 198: console.print(
  → [Manual print statements] rad 920: _console.print(
  → [Manual print statements] rad 989: print(Pretty(data, indent_guides=True, max_string=20))
  → [Manual print statements] rad 995: print(Pretty(Thing()))

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\pip\_vendor\rich\progress.py
  → [Manual print statements] rad 1165: self.console.print()

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\pip\_vendor\rich\progress_bar.py
  → [Manual print statements] rad 219: console.print(bar)
  → [Manual print statements] rad 223: console.print()

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\pip\_vendor\rich\prompt.py
  → [Manual print statements] rad 247: self.console.print(error)
  → [Manual print statements] rad 358: print(":pile_of_poo: [prompt.invalid]Number must be between 1 and 10")
  → [Manual print statements] rad 359: print(f"number={result}")
  → [Manual print statements] rad 368: print("[prompt.invalid]password too short")
  → [Manual print statements] rad 369: print(f"password={password!r}")
  → [Manual print statements] rad 372: print(f"fruit={fruit!r}")
  → [Manual print statements] rad 375: print("[b]OK :loudly_crying_face:")

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\pip\_vendor\rich\repr.py
  → [Manual print statements] rad 138: console.print(foo)
  → [Manual print statements] rad 140: console.print(foo, width=60)
  → [Manual print statements] rad 141: console.print(foo, width=30)
  → [Manual print statements] rad 146: console.print(foo)
  → [Manual print statements] rad 148: console.print(foo, width=60)
  → [Manual print statements] rad 149: console.print(foo, width=30)

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\pip\_vendor\rich\rule.py
  → [Manual print statements] rad 127: console.print(Rule(title=text))
  → [Manual print statements] rad 130: console.print(Rule("foo"), width=4)

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\pip\_vendor\rich\scope.py
  → [Manual print statements] rad 73: print()
  → [Manual print statements] rad 83: print(render_scope(locals(), title="[i]locals", sort_keys=False))
  → [Manual print statements] rad 86: print()

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\pip\_vendor\rich\segment.py
  → [Manual print statements] rad 715: console.print(text)"""
  → [Manual print statements] rad 722: console.print(
  → [Manual print statements] rad 725: console.print("\nConsider the following code:\n")
  → [Manual print statements] rad 726: console.print(Syntax(code, "python", line_numbers=True))
  → [Manual print statements] rad 727: console.print()
  → [Manual print statements] rad 728: console.print(
  → [Manual print statements] rad 729: "When you call [b]print()[/b], Rich [i]renders[/i] the object in to the following:\n"
  → [Manual print statements] rad 732: console.print(fragments)
  → [Manual print statements] rad 733: console.print()
  → [Manual print statements] rad 734: console.print("The Segments are then processed to produce the following output:\n")
  → [Manual print statements] rad 735: console.print(text)
  → [Manual print statements] rad 736: console.print(

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\pip\_vendor\rich\status.py
  → [Manual print statements] rad 131: console.print("[bold green]Covid deleted successfully")

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\pip\_vendor\rich\styled.py
  → [Manual print statements] rad 42: print(panel)

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\pip\_vendor\rich\syntax.py
  → [Manual print statements] rad 958: console.print(syntax, soft_wrap=args.soft_wrap)

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\pip\_vendor\rich\table.py
  → [Manual print statements] rad 962: console.print()
  → [Manual print statements] rad 964: console.print()
  → [Manual print statements] rad 969: console.print(table, justify="center")
  → [Manual print statements] rad 973: console.print(table)
  → [Manual print statements] rad 978: console.print(table, justify="center")
  → [Manual print statements] rad 985: console.print(table, justify="center")
  → [Manual print statements] rad 992: console.print(table, justify="center")
  → [Manual print statements] rad 1000: console.print(table, justify="center")

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\pip\_vendor\rich\text.py
  → [Manual print statements] rad 1344: console.print(text, style="red")
  → [Manual print statements] rad 1345: console.print()
  → [Manual print statements] rad 1348: console.print(text, style="green", justify="center")
  → [Manual print statements] rad 1349: console.print()
  → [Manual print statements] rad 1352: console.print(text, style="blue", justify="right")
  → [Manual print statements] rad 1353: console.print()
  → [Manual print statements] rad 1356: console.print(text, style="magenta", justify="full")
  → [Manual print statements] rad 1357: console.print()

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\pip\_vendor\rich\theme.py
  → [Manual print statements] rad 115: print(theme.config)

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\pip\_vendor\rich\traceback.py
  → [Manual print statements] rad 102: traceback_console.print(
  → [Manual print statements] rad 729: print(one / a)

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\pip\_vendor\rich\tree.py
  → [Manual print statements] rad 249: console.print(root)

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\pip\_vendor\rich\_log_render.py
  → [Manual print statements] rad 93: c.print("[on blue]Hello", justify="right")

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\pip\_vendor\rich\_ratio.py
  → [Manual print statements] rad 159: print(sum(resolved))

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\pip\_vendor\rich\_timer.py
  → [Manual print statements] rad 19: print(f"{subject} elapsed {elapsed_ms:.1f}ms")

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\pip\_vendor\rich\_win32_console.py
  → [Manual print statements] rad 592: console.print("[on red]on red!")
  → [Manual print statements] rad 593: console.print("[blue]blue!")
  → [Manual print statements] rad 594: console.print("[yellow]yellow!")
  → [Manual print statements] rad 595: console.print("[bold yellow]bold yellow!")
  → [Manual print statements] rad 596: console.print("[bright_yellow]bright_yellow!")
  → [Manual print statements] rad 597: console.print("[dim bright_yellow]dim bright_yellow!")
  → [Manual print statements] rad 598: console.print("[italic cyan]italic cyan!")
  → [Manual print statements] rad 599: console.print("[bold white on blue]bold white on blue!")
  → [Manual print statements] rad 600: console.print("[reverse bold white on blue]reverse bold white on blue!")
  → [Manual print statements] rad 601: console.print("[bold black on cyan]bold black on cyan!")
  → [Manual print statements] rad 602: console.print("[black on green]black on green!")
  → [Manual print statements] rad 603: console.print("[blue on green]blue on green!")
  → [Manual print statements] rad 604: console.print("[white on black]white on black!")
  → [Manual print statements] rad 605: console.print("[black on white]black on white!")
  → [Manual print statements] rad 606: console.print("[#1BB152 on #DA812D]#1BB152 on #DA812D!")
  → [Manual print statements] rad 610: console.print()
  → [Manual print statements] rad 634: console.print()
  → [Manual print statements] rad 636: console.print("\n...Deleting to the start of the line...")
  → [Manual print statements] rad 646: console.print("\n\n...And to the end of the line...")
  → [Manual print statements] rad 656: console.print("\n\n...Now the whole line will be erased...")
  → [Manual print statements] rad 662: print("\n")

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\pip\_vendor\rich\_windows.py
  → [Manual print statements] rad 70: print(f'platform="{platform.system()}"')
  → [Manual print statements] rad 71: print(repr(features))

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\pip\_vendor\rich\_wrap.py
  → [Manual print statements] rad 85: console.print("12345 abcdefghijklmnopqrstuvwyxzABCDEFGHIJKLMNOPQRSTUVWXYZ 12345")
  → [Manual print statements] rad 86: print(chop_cells("abcdefghijklmnopqrstuvwxyz", 10))
  → [Manual print statements] rad 90: console.print("TextualはPythonの高速アプリケーション開発フレームワークです")
  → [Manual print statements] rad 93: console.print("アプリケーションは1670万色を使用でき")

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\pip\_vendor\rich\__init__.py
  → [Manual print statements] rad 53: def print(
  → [Manual print statements] rad 74: return write_console.print(*objects, sep=sep, end=end)
  → [Manual print statements] rad 173: _console.print(_inspect)
  → [Manual print statements] rad 177: print("Hello, **World**")

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\pip\_vendor\rich\__main__.py
  → [Manual print statements] rad 218: console.print(test_card)
  → [Manual print statements] rad 224: console.print(test_card)
  → [Manual print statements] rad 228: c.print(test_card)
  → [Manual print statements] rad 230: print(f"rendered in {pre_cache_taken}ms (cold cache)")
  → [Manual print statements] rad 231: print(f"rendered in {taken}ms (warm cache)")
  → [Manual print statements] rad 264: console.print(

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\pip\_vendor\urllib3\packages\six.py
  → [Manual print statements] rad 852: raise TypeError("invalid keyword arguments to print()")

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\platformdirs\__main__.py
  → [Manual print statements] rad 31: print(f"-- platformdirs {__version__} --")  # noqa: T201
  → [Manual print statements] rad 33: print("-- app dirs (with optional 'version')")  # noqa: T201
  → [Manual print statements] rad 36: print(f"{prop}: {getattr(dirs, prop)}")  # noqa: T201
  → [Manual print statements] rad 38: print("\n-- app dirs (without optional 'version')")  # noqa: T201
  → [Manual print statements] rad 41: print(f"{prop}: {getattr(dirs, prop)}")  # noqa: T201
  → [Manual print statements] rad 43: print("\n-- app dirs (without optional 'appauthor')")  # noqa: T201
  → [Manual print statements] rad 46: print(f"{prop}: {getattr(dirs, prop)}")  # noqa: T201
  → [Manual print statements] rad 48: print("\n-- app dirs (with disabled 'appauthor')")  # noqa: T201
  → [Manual print statements] rad 51: print(f"{prop}: {getattr(dirs, prop)}")  # noqa: T201

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\psutil\_common.py
  → [Manual print statements] rad 469: ...         print(1)
  → [Manual print statements] rad 933: print(s, file=file)  # NOQA
  → [Manual print statements] rad 935: print(hilite(s, color, bold), file=file)  # NOQA
  → [Manual print statements] rad 962: print(s, file=file)  # NOQA
  → [Manual print statements] rad 981: print(  # noqa

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\psutil\__init__.py
  → [Manual print statements] rad 1564: ...     print("process {} terminated".format(proc))
  → [Manual print statements] rad 2422: print(templ % ("USER", "PID", "%MEM", "VSZ", "RSS", "NICE",  # NOQA
  → [Manual print statements] rad 2484: print(line[: get_terminal_size()[0]])  # NOQA

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\psutil\tests\runner.py
  → [Manual print statements] rad 72: print(msg, file=file)
  → [Manual print statements] rad 278: print(
  → [Manual print statements] rad 303: print(

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\psutil\tests\test_connections.py
  → [Potentially suspicious eval() usage] rad 361: tcp4_addr = eval(wait_for_file(testfile, delete=True))  # noqa
  → [Potentially suspicious eval() usage] rad 363: udp4_addr = eval(wait_for_file(testfile, delete=True))  # noqa
  → [Potentially suspicious eval() usage] rad 366: tcp6_addr = eval(wait_for_file(testfile, delete=True))  # noqa
  → [Potentially suspicious eval() usage] rad 368: udp6_addr = eval(wait_for_file(testfile, delete=True))  # noqa

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\psutil\tests\test_process.py
  → [Manual print statements] rad 725: out = sh([exe, "-c", "import os; print('hey')"])

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\psutil\tests\__init__.py
  → [Manual print statements] rad 148: "import platform; print(platform.mac_ver()[0])",
  → [Potentially suspicious eval() usage] rad 789: """Keep calling function for timeout secs and exit if eval()
  → [Potentially suspicious eval() usage] rad 793: assert eval(expr)  # noqa
  → [Manual print statements] rad 1210: print()  # NOQA
  → [Manual print statements] rad 1347: print("=" * 70, file=sys.stderr)  # NOQA
  → [Manual print statements] rad 1349: print("%-17s %s" % (k + ':', v), file=sys.stderr)  # NOQA
  → [Manual print statements] rad 1350: print("=" * 70, file=sys.stderr)  # NOQA
  → [Manual print statements] rad 1357: print("=" * 70, file=sys.stderr)  # NOQA
  → [Manual print statements] rad 1608: print("%r, retrying" % exc, file=sys.stderr)  # NOQA

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\pyasn1\codec\ber\decoder.py
  → [Manual print statements] rad 1943: ...     print(asn1Object)
  → [Manual print statements] rad 1959: ...     print(asn1Object)

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\pycparser\c_generator.py
  → [Manual print statements] rad 436: #~ print(n, modifiers)

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\pycparser\ply\cpp.py
  → [Manual print statements] rad 196: print("%s:%d %s" % (file,line,msg))
  → [Manual print statements] rad 213: print("Couldn't determine identifier type")
  → [Manual print statements] rad 221: print("Couldn't determine integer type")
  → [Manual print statements] rad 230: print("Couldn't determine string type")
  → [Manual print statements] rad 247: print("Couldn't determine token for newlines")
  → [Manual print statements] rad 259: print("Unable to lex '%s' required for preprocessor" % c)
  → [Potentially suspicious eval() usage] rad 600: result = eval(expr)
  → [Manual print statements] rad 758: print("Malformed #include <...>")
  → [Manual print statements] rad 766: print("Malformed #include statement")
  → [Manual print statements] rad 783: print("Couldn't find '%s'" % filename)
  → [Manual print statements] rad 815: print("No more arguments may follow a variadic argument")
  → [Manual print statements] rad 834: print("Invalid macro argument")
  → [Manual print statements] rad 851: print("Bad macro definition")
  → [Manual print statements] rad 853: print("Bad macro definition")
  → [Manual print statements] rad 905: print(p.source, tok)

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\pycparser\ply\yacc.py
  → [Potentially suspicious eval() usage] rad 1562: c = eval(s)

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\pycparser\ply\ygen.py
  → [Manual print statements] rad 66: print('Updated yacc.py')

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\pydantic\config.py
  → [Manual print statements] rad 70: print(user)
  → [Manual print statements] rad 90: print(user)
  → [Manual print statements] rad 111: print(e)
  → [Old pydantic config 'allow_population_by_field_name'] rad 137: `allow_population_by_field_name` to `populate_by_name`.
  → [Manual print statements] rad 151: print(user)
  → [Manual print statements] rad 154: print(user)
  → [Manual print statements] rad 194: print(model1.model_dump())
  → [Manual print statements] rad 198: print(model2.model_dump())
  → [Manual print statements] rad 218: print(user)
  → [Manual print statements] rad 221: print(user)
  → [Manual print statements] rad 237: print(user)
  → [Manual print statements] rad 242: print(e)
  → [Manual print statements] rad 276: print(model)
  → [Manual print statements] rad 278: print(model.pet)
  → [Manual print statements] rad 280: print(model.pet.name)
  → [Manual print statements] rad 282: print(type(model.pet))
  → [Manual print statements] rad 288: print(e)
  → [Manual print statements] rad 299: print(model2)
  → [Manual print statements] rad 301: print(model2.pet)
  → [Manual print statements] rad 303: print(model2.pet.name)
  → [Manual print statements] rad 305: print(type(model2.pet))
  → [Manual print statements] rad 336: print(voice.language_code)
  → [Manual print statements] rad 338: print(voice.model_dump(by_alias=True))
  → [Manual print statements] rad 426: print(t)
  → [Manual print statements] rad 431: print(t)
  → [Manual print statements] rad 436: print(t)
  → [Manual print statements] rad 463: print(t)
  → [Manual print statements] rad 470: print(e)
  → [Manual print statements] rad 479: print(t)  # (3)!
  → [Manual print statements] rad 506: print(t)
  → [Manual print statements] rad 511: print(t)
  → [Manual print statements] rad 516: print(t)  # (3)!
  → [Manual print statements] rad 580: print(e)
  → [Manual print statements] rad 608: print(e)
  → [Manual print statements] rad 628: print(e)
  → [Manual print statements] rad 650: print(e)
  → [Manual print statements] rad 670: print(e)
  → [Manual print statements] rad 723: print(Model.model_json_schema(mode='validation'))
  → [Manual print statements] rad 731: print(Model.model_json_schema(mode='serialization'))
  → [Manual print statements] rad 764: print(Model.model_json_schema(mode='serialization'))
  → [Manual print statements] rad 779: print(ForceInputModel.model_json_schema(mode='serialization'))
  → [Manual print statements] rad 813: print(Model(value=42))
  → [Manual print statements] rad 815: print(e)
  → [Manual print statements] rad 854: print(Model(value='abcdef').value)
  → [Manual print statements] rad 858: print(Model(value='abxyzcdef'))
  → [Manual print statements] rad 860: print(e)

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\pydantic\fields.py
  → [Manual print statements] rad 1047: print(Rectangle(width=3, length=2).model_dump())
  → [Manual print statements] rad 1086: print(repr(square))
  → [Manual print statements] rad 1089: print(square.random_number)
  → [Manual print statements] rad 1094: print(square.model_dump_json(by_alias=True))
  → [Manual print statements] rad 1118: print(repr(e))
  → [Manual print statements] rad 1143: print(repr(m))

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\pydantic\functional_validators.py
  → [Manual print statements] rad 48: print(Model(a=1).a)
  → [Manual print statements] rad 54: print(e.json(indent=2))
  → [Manual print statements] rad 104: print(Model(a=1).a)
  → [Manual print statements] rad 110: print(e)
  → [Manual print statements] rad 148: print(Model(a='1').a)
  → [Manual print statements] rad 196: print(Model(a='now').a)
  → [Manual print statements] rad 198: print(Model(a='invalid').a)
  → [Manual print statements] rad 311: print(repr(Model(a='this is foobar good')))
  → [Manual print statements] rad 317: print(exc_info)
  → [Manual print statements] rad 517: print(repr(s))
  → [Manual print statements] rad 523: print(e)
  → [Manual print statements] rad 577: print(e)

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\pydantic\json_schema.py
  → [Manual print statements] rad 2346: print(Model.model_json_schema())

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\pydantic\networks.py
  → [Manual print statements] rad 121: print(m.url)
  → [Manual print statements] rad 127: print(e)
  → [Manual print statements] rad 137: print(e)
  → [Manual print statements] rad 156: print(m1.url)
  → [Manual print statements] rad 159: print(m2.url)
  → [Manual print statements] rad 162: print(m3.url)
  → [Manual print statements] rad 228: print(repr(m.url))
  → [Manual print statements] rad 230: print(m.url.scheme)
  → [Manual print statements] rad 232: print(m.url.host)
  → [Manual print statements] rad 234: print(m.url.port)
  → [Manual print statements] rad 246: print(m.db)
  → [Manual print statements] rad 252: print(e)
  → [Manual print statements] rad 379: print(Model(email='contact@mail.com'))
  → [Manual print statements] rad 429: print(user.email)
  → [Manual print statements] rad 431: print(user.email.name)
  → [Manual print statements] rad 435: print(user.email)
  → [Manual print statements] rad 437: print(user.email.name)
  → [Manual print statements] rad 498: print(IpModel(ip='127.0.0.1'))
  → [Manual print statements] rad 504: print(e.errors())

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\pydantic\types.py
  → [Manual print statements] rad 200: print(repr(m))
  → [Manual print statements] rad 206: print(e.errors())
  → [Manual print statements] rad 240: print(repr(m))
  → [Manual print statements] rad 246: print(e.errors())
  → [Manual print statements] rad 271: print(repr(m))
  → [Manual print statements] rad 277: print(e.errors())
  → [Manual print statements] rad 302: print(repr(m))
  → [Manual print statements] rad 308: print(e.errors())
  → [Manual print statements] rad 333: print(repr(m))
  → [Manual print statements] rad 339: print(e.errors())
  → [Manual print statements] rad 366: print(e)
  → [Manual print statements] rad 447: print(repr(m))
  → [Manual print statements] rad 453: print(e.errors())
  → [Manual print statements] rad 487: print(repr(m))
  → [Manual print statements] rad 493: print(e.errors())
  → [Manual print statements] rad 518: print(repr(m))
  → [Manual print statements] rad 524: print(e.errors())
  → [Manual print statements] rad 549: print(repr(m))
  → [Manual print statements] rad 555: print(e.errors())
  → [Manual print statements] rad 580: print(repr(m))
  → [Manual print statements] rad 586: print(e.errors())
  → [Manual print statements] rad 613: print(e)
  → [Manual print statements] rad 631: print(m)
  → [Manual print statements] rad 763: print(foo)
  → [Manual print statements] rad 913: print(e)
  → [Manual print statements] rad 939: print(m)
  → [Manual print statements] rad 941: print(m.model_dump_json())
  → [Manual print statements] rad 1045: print(repr(m))
  → [Manual print statements] rad 1051: print(e.errors())
  → [Manual print statements] rad 1234: print(m.model_dump())
  → [Manual print statements] rad 1243: print(e)
  → [Manual print statements] rad 1254: print(e)
  → [Manual print statements] rad 1276: print(m.model_dump())
  → [Manual print statements] rad 1285: print(e)
  → [Manual print statements] rad 1296: print(e)
  → [Manual print statements] rad 1335: print(AnyJsonModel(json_obj='{"b": 1}'))
  → [Manual print statements] rad 1337: print(ConstrainedJsonModel(json_obj='[1, 2, 3]'))
  → [Manual print statements] rad 1343: print(e)
  → [Manual print statements] rad 1353: print(e)
  → [Manual print statements] rad 1363: print(e)
  → [Manual print statements] rad 1386: print(ConstrainedJsonModel(json_obj='[1, 2, 3]').model_dump_json())
  → [Manual print statements] rad 1388: print(
  → [Manual print statements] rad 1525: print(user)
  → [Manual print statements] rad 1527: print(user.password.get_secret_value())
  → [Manual print statements] rad 1550: print(user.password.get_secret_value())
  → [Manual print statements] rad 1720: print(MyModel(size=52000).size)
  → [Manual print statements] rad 1722: print(MyModel(size='3000 KiB').size)
  → [Manual print statements] rad 1726: print(m.size.human_readable())
  → [Manual print statements] rad 1728: print(m.size.human_readable(decimal=True))
  → [Manual print statements] rad 1731: print(m.size.to('TiB'))
  → [Manual print statements] rad 2131: print(m.my_encoded_bytes)
  → [Manual print statements] rad 2135: print(m.model_dump())
  → [Manual print statements] rad 2142: print(e)
  → [Manual print statements] rad 2228: print(m.my_encoded_str)
  → [Manual print statements] rad 2232: print(m.model_dump())
  → [Manual print statements] rad 2239: print(e)
  → [Manual print statements] rad 2300: print(m.base64_bytes)
  → [Manual print statements] rad 2304: print(m.model_dump())
  → [Manual print statements] rad 2309: print(Model(base64_bytes=b'undecodable').base64_bytes)
  → [Manual print statements] rad 2311: print(e)
  → [Manual print statements] rad 2338: print(m.base64_str)
  → [Manual print statements] rad 2342: print(m.model_dump())
  → [Manual print statements] rad 2347: print(Model(base64_str='undecodable').base64_str)
  → [Manual print statements] rad 2349: print(e)
  → [Manual print statements] rad 2375: print(m)
  → [Manual print statements] rad 2396: print(m)
  → [Manual print statements] rad 2427: print(repr(Model(x='abc').x))
  → [Manual print statements] rad 2501: print(repr(apple_variation))
  → [Manual print statements] rad 2515: print(repr(pumpkin_variation))
  → [Manual print statements] rad 2590: print(repr(apple_variation))
  → [Manual print statements] rad 2604: print(repr(pumpkin_variation))
  → [Manual print statements] rad 2765: print(repr(Model.model_validate(valid_json_data)))
  → [Manual print statements] rad 2767: print(repr(Model.model_validate_json(json.dumps(valid_json_data))))
  → [Manual print statements] rad 2773: print(e)

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\pydantic\v1\config.py
  → [Old pydantic config 'allow_population_by_field_name'] rad 56: allow_population_by_field_name: bool
  → [Old pydantic config 'allow_population_by_field_name'] rad 91: allow_population_by_field_name: bool = False

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\pydantic\v1\fields.py
  → [Old pydantic config 'allow_population_by_field_name'] rad 1113: if self.model_config.allow_population_by_field_name:

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\pydantic\v1\main.py
  → [Old pydantic config 'allow_population_by_field_name'] rad 1057: if value is _missing and config.allow_population_by_field_name and field.alt_alias:

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\pydantic\v1\mypy.py
  → [Old pydantic config 'allow_population_by_field_name'] rad 292: 'allow_population_by_field_name',
  → [Old pydantic config 'allow_population_by_field_name'] rad 360: and not config.allow_population_by_field_name
  → [Old pydantic config 'allow_population_by_field_name'] rad 422: and not model_config.allow_population_by_field_name
  → [Old pydantic config 'allow_population_by_field_name'] rad 466: use_alias = config.allow_population_by_field_name is not True
  → [Old pydantic config 'allow_population_by_field_name'] rad 468: config.has_alias_generator and not config.allow_population_by_field_name
  → [Old pydantic config 'allow_population_by_field_name'] rad 690: if not config.allow_population_by_field_name:
  → [Old pydantic config 'allow_population_by_field_name'] rad 757: allow_population_by_field_name: Optional[bool] = None,
  → [Old pydantic config 'allow_population_by_field_name'] rad 764: self.allow_population_by_field_name = allow_population_by_field_name

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\pydantic\v1\utils.py
  → [Potentially suspicious eval() usage] rad 194: eval('__IPYTHON__')
  → [Old pydantic config 'allow_population_by_field_name'] rad 257: allow_names = config.allow_population_by_field_name

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\pydantic\_internal\_config.py
  → [Old pydantic config 'allow_population_by_field_name'] rad 295: 'allow_population_by_field_name': 'populate_by_name',

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\pydantic\_internal\_core_utils.py
  → [Manual print statements] rad 579: return print(schema)

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\pydantic\_internal\_known_annotated_metadata.py
  → [Manual print statements] rad 131: print(list(expand_grouped_metadata([Ge(4), Len(5)])))
  → [Manual print statements] rad 352: print(collect_known_metadata([Gt(1), Len(42), ...]))

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\pydantic\_internal\_typing_extra.py
  → [Potentially suspicious eval() usage] rad 323: (unless you are familiar with how eval() and exec() work).  The
  → [Potentially suspicious eval() usage] rad 356: # the globalns and localns order so that eval() looks into

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\pydantic_core\core_schema.py
  → [Old pydantic config 'allow_population_by_field_name'] rad 62: as well as the alias. (Replaces 'allow_population_by_field_name' in Pydantic v1.) Default is `False`.
  → [Old pydantic config 'allow_population_by_field_name'] rad 95: populate_by_name: bool  # replaces `allow_population_by_field_name` in pydantic v1
  → [Old pydantic config 'allow_population_by_field_name'] rad 2658: populate_by_name: bool  # replaces `allow_population_by_field_name` in pydantic v1
  → [Old pydantic config 'allow_population_by_field_name'] rad 2776: populate_by_name: bool  # replaces `allow_population_by_field_name` in pydantic v1
  → [Manual print statements] rad 2807: print(v.validate_python({'a': 'hello'}))
  → [Manual print statements] rad 3448: print(v.validate_python('https://example.com'))
  → [Manual print statements] rad 3514: print(v.validate_python('redis://localhost,0.0.0.0,127.0.0.1'))

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\pymongo\uri_parser.py
  → [Manual print statements] rad 638: print(exc)  # noqa: T201

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\pymongo\__init__.py
  → [Manual print statements] rad 154: print(f"block timed out: {exc!r}")
  → [Manual print statements] rad 156: print(f"failed with non-timeout error: {exc!r}")

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\pymongo\asynchronous\change_stream.py
  → [Manual print statements] rad 304: print(insert_change)
  → [Manual print statements] rad 320: print(insert_change)
  → [Manual print statements] rad 356: print("Current resume token: %r" % (stream.resume_token,))
  → [Manual print statements] rad 358: print("Change document: %r" % (change,))

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\pymongo\asynchronous\collection.py
  → [Manual print statements] rad 438: print(change)
  → [Manual print statements] rad 454: print(insert_change)
  → [Manual print statements] rad 699: ...     print(doc)
  → [Manual print statements] rad 718: ...     print(doc)
  → [Manual print statements] rad 1109: ...     print(doc)
  → [Manual print statements] rad 1118: ...     print(doc)
  → [Manual print statements] rad 1212: ...     print(doc)
  → [Manual print statements] rad 1223: ...     print(doc)
  → [Manual print statements] rad 1325: ...     print(doc)
  → [Manual print statements] rad 1336: ...     print(doc)
  → [Manual print statements] rad 1916: ...     print(bson.decode_all(batch))
  → [Manual print statements] rad 2461: ...     print(index)
  → [Manual print statements] rad 2976: ...     print(bson.decode_all(batch))
  → [Manual print statements] rad 3243: ...     print(doc)
  → [Manual print statements] rad 3331: ...     print(doc)
  → [Manual print statements] rad 3339: ...     print(doc)
  → [Manual print statements] rad 3481: ...     print(doc)

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\pymongo\asynchronous\command_cursor.py
  → [Manual print statements] rad 170: print(doc)

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\pymongo\asynchronous\cursor.py
  → [Manual print statements] rad 578: print(cursor[idx])
  → [Manual print statements] rad 719: print(doc)
  → [Manual print statements] rad 727: print(doc)
  → [Manual print statements] rad 739: print(doc)
  → [Manual print statements] rad 838: print(doc)
  → [Manual print statements] rad 911: print(doc)

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\pymongo\asynchronous\database.py
  → [Motor usage with bracket access (db['collection'])] rad 109: db['__my_collection__']
  → [Manual print statements] rad 356: print(change)
  → [Manual print statements] rad 372: print(insert_change)
  → [Manual print statements] rad 628: print(operation)

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\pymongo\asynchronous\mongo_client.py
  → [Manual print statements] rad 247: print("Server not available")
  → [Manual print statements] rad 967: print(change)
  → [Manual print statements] rad 983: print(insert_change)
  → [Manual print statements] rad 2281: ...     print(doc)
  → [Manual print statements] rad 2287: ...     print(doc)
  → [Manual print statements] rad 2307: ...     print(doc)
  → [Manual print statements] rad 2314: ...     print(doc)

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\pymongo\synchronous\change_stream.py
  → [Manual print statements] rad 302: print(insert_change)
  → [Manual print statements] rad 318: print(insert_change)
  → [Manual print statements] rad 354: print("Current resume token: %r" % (stream.resume_token,))
  → [Manual print statements] rad 356: print("Change document: %r" % (change,))

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\pymongo\synchronous\collection.py
  → [Manual print statements] rad 439: print(change)
  → [Manual print statements] rad 455: print(insert_change)
  → [Manual print statements] rad 698: ...     print(doc)
  → [Manual print statements] rad 717: ...     print(doc)
  → [Manual print statements] rad 1108: ...     print(doc)
  → [Manual print statements] rad 1117: ...     print(doc)
  → [Manual print statements] rad 1211: ...     print(doc)
  → [Manual print statements] rad 1222: ...     print(doc)
  → [Manual print statements] rad 1324: ...     print(doc)
  → [Manual print statements] rad 1335: ...     print(doc)
  → [Manual print statements] rad 1915: ...     print(bson.decode_all(batch))
  → [Manual print statements] rad 2458: ...     print(index)
  → [Manual print statements] rad 2969: ...     print(bson.decode_all(batch))
  → [Manual print statements] rad 3236: ...     print(doc)
  → [Manual print statements] rad 3324: ...     print(doc)
  → [Manual print statements] rad 3332: ...     print(doc)
  → [Manual print statements] rad 3474: ...     print(doc)

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\pymongo\synchronous\command_cursor.py
  → [Manual print statements] rad 170: print(doc)

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\pymongo\synchronous\cursor.py
  → [Manual print statements] rad 576: print(cursor[idx])
  → [Manual print statements] rad 717: print(doc)
  → [Manual print statements] rad 725: print(doc)
  → [Manual print statements] rad 737: print(doc)
  → [Manual print statements] rad 836: print(doc)
  → [Manual print statements] rad 909: print(doc)

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\pymongo\synchronous\database.py
  → [Motor usage with bracket access (db['collection'])] rad 109: db['__my_collection__']
  → [Manual print statements] rad 356: print(change)
  → [Manual print statements] rad 372: print(insert_change)
  → [Manual print statements] rad 628: print(operation)

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\pymongo\synchronous\mongo_client.py
  → [Manual print statements] rad 242: print("Server not available")
  → [Manual print statements] rad 965: print(change)
  → [Manual print statements] rad 981: print(insert_change)
  → [Manual print statements] rad 2269: ...     print(doc)
  → [Manual print statements] rad 2275: ...     print(doc)
  → [Manual print statements] rad 2295: ...     print(doc)
  → [Manual print statements] rad 2302: ...     print(doc)

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\rsa\cli.py
  → [Manual print statements] rad 75: print("Not a valid number: %s" % cli_args[0], file=sys.stderr)
  → [Manual print statements] rad 78: print("Generating %i-bit key" % keysize, file=sys.stderr)
  → [Manual print statements] rad 83: print("Writing public key to %s" % cli.pubout, file=sys.stderr)
  → [Manual print statements] rad 92: print("Writing private key to %s" % cli.out, file=sys.stderr)
  → [Manual print statements] rad 96: print("Writing private key to stdout", file=sys.stderr)
  → [Manual print statements] rad 144: print(self.operation_progressive.title(), file=sys.stderr)
  → [Manual print statements] rad 181: print("Reading %s key from %s" % (self.keyname, filename), file=sys.stderr)
  → [Manual print statements] rad 191: print("Reading input from %s" % inname, file=sys.stderr)
  → [Manual print statements] rad 195: print("Reading input from stdin", file=sys.stderr)
  → [Manual print statements] rad 202: print("Writing output to %s" % outname, file=sys.stderr)
  → [Manual print statements] rad 206: print("Writing output to stdout", file=sys.stderr)
  → [Manual print statements] rad 315: print("Verification OK", file=sys.stderr)

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\rsa\key.py
  → [Manual print statements] rad 854: print("%i times" % count)
  → [Manual print statements] rad 856: print("Aborted")
  → [Manual print statements] rad 858: print("Doctests done")

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\rsa\parallel.py
  → [Manual print statements] rad 85: print("Running doctests 1000x or until failure")
  → [Manual print statements] rad 94: print("%i times" % count)
  → [Manual print statements] rad 96: print("Doctests done")

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\rsa\pkcs1.py
  → [Manual print statements] rad 474: print("Running doctests 1000x or until failure")
  → [Manual print statements] rad 483: print("%i times" % count)
  → [Manual print statements] rad 485: print("Doctests done")

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\rsa\pkcs1_v2.py
  → [Manual print statements] rad 89: print("Running doctests 1000x or until failure")
  → [Manual print statements] rad 98: print("%i times" % count)
  → [Manual print statements] rad 100: print("Doctests done")

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\rsa\prime.py
  → [Manual print statements] rad 187: print("Running doctests 1000x or until failure")
  → [Manual print statements] rad 196: print("%i times" % count)
  → [Manual print statements] rad 198: print("Doctests done")

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\rsa\util.py
  → [Manual print statements] rad 69: print(
  → [Manual print statements] rad 76: print("Reading private key from stdin in %s format" % cli.inform, file=sys.stderr)
  → [Manual print statements] rad 89: print(
  → [Manual print statements] rad 96: print("Writing public key to stdout in %s format" % cli.outform, file=sys.stderr)

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\scipy\__config__.py
  → [Manual print statements] rad 149: print(yaml.dump(CONFIG))
  → [Manual print statements] rad 155: print(json.dumps(CONFIG, indent=2))

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\scipy\cluster\hierarchy.py
  → [Manual print statements] rad 1714: >>> print(Z)

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\scipy\constants\_codata.py
  → [Manual print statements] rad 1705: print(key)

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\scipy\datasets\_utils.py
  → [Manual print statements] rad 25: print(f"Cache Directory {cache_dir} doesn't exist. Nothing to clear.")
  → [Manual print statements] rad 29: print(f"Cleaning the cache directory {cache_dir}!")
  → [Manual print statements] rad 49: print("Cleaning the file "
  → [Manual print statements] rad 54: print(f"Path {data_filepath} doesn't exist. "

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\scipy\fft\_debug_backends.py
  → [Manual print statements] rad 22: print(method, args, kwargs, sep='\n')

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\scipy\integrate\_bvp.py
  → [Manual print statements] rad 503: print("{:^15}{:^15}{:^15}{:^15}{:^15}".format(
  → [Manual print statements] rad 510: print("{:^15}{:^15.2e}{:^15.2e}{:^15}{:^15}".format(
  → [Manual print statements] rad 1132: print(f"Solved in {iteration} iterations, number of nodes {x.shape[0]}. \n"
  → [Manual print statements] rad 1136: print(f"Number of nodes is exceeded after iteration {iteration}. \n"
  → [Manual print statements] rad 1140: print("Singular Jacobian encountered when solving the collocation "
  → [Manual print statements] rad 1145: print("The solver was unable to satisfy boundary conditions "

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\scipy\integrate\_ode.py
  → [Manual print statements] rad 327: ...     print(r.t+dt, r.integrate(r.t+dt))

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\scipy\integrate\_quadpack_py.py
  → [Manual print statements] rad 374: >>> print(4**3 / 3.)  # analytical result
  → [Manual print statements] rad 410: print((1.0**3/3.0 + 1.0) - (0.0**3/3.0 + 0.0)) #Analytic result

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\scipy\integrate\_quadrature.py
  → [Manual print statements] rad 233: >>> print(1/9.0)  # analytical result
  → [Manual print statements] rad 359: >>> print(1/9.0)  # analytical result
  → [Manual print statements] rad 1044: print("*** Printing table only supported for integrals" +
  → [Manual print statements] rad 1058: print(title, "=" * len(title), sep="\n", end="\n")
  → [Manual print statements] rad 1061: print(formstr % R[(i, j)], end=" ")
  → [Manual print statements] rad 1062: print()
  → [Manual print statements] rad 1063: print("=" * len(title))
  → [Manual print statements] rad 1117: print('Romberg integration of', repr(function), end=' ')
  → [Manual print statements] rad 1118: print('from', interval)
  → [Manual print statements] rad 1119: print('')
  → [Manual print statements] rad 1120: print('%6s %9s %9s' % ('Steps', 'StepSize', 'Results'))
  → [Manual print statements] rad 1122: print('%6d %9f' % (2**i, (interval[1]-interval[0])/(2.**i)), end=' ')
  → [Manual print statements] rad 1124: print('%9f' % (resmat[i][j]), end=' ')
  → [Manual print statements] rad 1125: print('')
  → [Manual print statements] rad 1126: print('')
  → [Manual print statements] rad 1127: print('The final result is', resmat[i][j], end=' ')
  → [Manual print statements] rad 1128: print('after', 2**(len(resmat)-1)+1, 'function evaluations.')
  → [Manual print statements] rad 1218: >>> print("%g %g" % (2*result, erf(1)))
  → [Manual print statements] rad 1376: ...     print('{:2d}  {:10.9f}  {:.5e}'.format(N, quad, error))

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\scipy\integrate\_ivp\ivp.py
  → [Manual print statements] rad 444: >>> print(sol.t)
  → [Manual print statements] rad 447: >>> print(sol.y)
  → [Manual print statements] rad 459: >>> print(sol.t)
  → [Manual print statements] rad 461: >>> print(sol.y)
  → [Manual print statements] rad 477: >>> print(sol.t_events)
  → [Manual print statements] rad 479: >>> print(sol.t)
  → [Manual print statements] rad 493: >>> print(sol.t_events)
  → [Manual print statements] rad 495: >>> print(sol.t)
  → [Manual print statements] rad 498: >>> print(sol.sol(sol.t_events[1][0]))
  → [Manual print statements] rad 500: >>> print(sol.y_events)
  → [Manual print statements] rad 543: >>> print(result.y[:, 0])
  → [Manual print statements] rad 545: >>> print(result.y[:, -1])
  → [Manual print statements] rad 559: >>> print(result.y[:, 0].reshape(3, 3))
  → [Manual print statements] rad 563: >>> print(result.y[:, -1].reshape(3, 3))

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\scipy\interpolate\_cubic.py
  → [Manual print statements] rad 720: >>> print("ds/dx={:.1f} ds/dy={:.1f}".format(cs(0, 1)[0], cs(0, 1)[1]))

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\scipy\interpolate\_rgi.py
  → [Manual print statements] rad 696: >>> print(interpn(points, values, point))

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\scipy\interpolate\tests\test_interpnd.py
  → [Manual print statements] rad 285: print("_check_accuracy: abs(a-b):", abs(a - b))
  → [Manual print statements] rad 286: print("ip.grad:", ip.grad)

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\scipy\io\wavfile.py
  → [Manual print statements] rad 651: >>> print(f"number of channels = {data.shape[1]}")
  → [Manual print statements] rad 654: >>> print(f"length = {length}s")

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\scipy\io\_fortran.py
  → [Manual print statements] rad 85: >>> print(f.read_ints(np.int32))
  → [Manual print statements] rad 87: >>> print(f.read_reals(float).reshape((5,4), order="F"))

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\scipy\io\_idl.py
  → [Manual print statements] rad 731: >>> print(sav_data.keys())
  → [Manual print statements] rad 736: >>> print(sav_data['array1d'])
  → [Manual print statements] rad 771: print("IDL Save file is compressed")
  → [Manual print statements] rad 779: print(" -> expanding to %s" % fout.name)
  → [Manual print statements] rad 863: print("-"*50)
  → [Manual print statements] rad 864: print("Date: %s" % record['date'])
  → [Manual print statements] rad 865: print("User: %s" % record['user'])
  → [Manual print statements] rad 866: print("Host: %s" % record['host'])
  → [Manual print statements] rad 872: print("-"*50)
  → [Manual print statements] rad 873: print("Format: %s" % record['format'])
  → [Manual print statements] rad 874: print("Architecture: %s" % record['arch'])
  → [Manual print statements] rad 875: print("Operating System: %s" % record['os'])
  → [Manual print statements] rad 876: print("IDL Version: %s" % record['release'])
  → [Manual print statements] rad 882: print("-"*50)
  → [Manual print statements] rad 883: print("Author: %s" % record['author'])
  → [Manual print statements] rad 884: print("Title: %s" % record['title'])
  → [Manual print statements] rad 885: print("ID Code: %s" % record['idcode'])
  → [Manual print statements] rad 891: print("-"*50)
  → [Manual print statements] rad 892: print("Description: %s" % record['description'])
  → [Manual print statements] rad 895: print("-"*50)
  → [Manual print statements] rad 896: print("Successfully read %i records of which:" %
  → [Manual print statements] rad 904: print(" - %i are of type %s" % (rectypes.count(rt), rt))
  → [Manual print statements] rad 905: print("-"*50)
  → [Manual print statements] rad 908: print("Available variables:")
  → [Manual print statements] rad 910: print(f" - {var} [{type(variables[var])}]")
  → [Manual print statements] rad 911: print("-"*50)

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\scipy\io\_mmio.py
  → [Manual print statements] rad 172: >>> print(target.getvalue().decode('latin1'))
  → [Manual print statements] rad 189: >>> print(target.getvalue().decode('latin1'))
  → [Manual print statements] rad 210: >>> print(target.getvalue().decode('latin1'))
  → [Manual print statements] rad 230: >>> print(target.getvalue().decode('latin1'))

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\scipy\io\_netcdf.py
  → [Manual print statements] rad 199: >>> print(f.history)
  → [Manual print statements] rad 202: >>> print(time.units)
  → [Manual print statements] rad 204: >>> print(time.shape)
  → [Manual print statements] rad 206: >>> print(time[-1])
  → [Manual print statements] rad 227: ...     print(f.history)

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\scipy\io\arff\_arffread.py
  → [Manual print statements] rad 667: print(i)
  → [Manual print statements] rad 887: print(f"{name},{type},{min:f},{max:f},{mean:f},{std:f}")
  → [Manual print statements] rad 889: print(str(tp))
  → [Manual print statements] rad 894: print(len(data.dtype))
  → [Manual print statements] rad 895: print(data.size)

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\scipy\io\_fast_matrix_market\__init__.py
  → [Manual print statements] rad 413: >>> print(target.getvalue().decode('latin1'))
  → [Manual print statements] rad 430: >>> print(target.getvalue().decode('latin1'))
  → [Manual print statements] rad 451: >>> print(target.getvalue().decode('latin1'))
  → [Manual print statements] rad 471: >>> print(target.getvalue().decode('latin1'))

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\scipy\io\_harwell_boeing\hb.py
  → [Manual print statements] rad 500: >>> print(hb_read("data.hb"))  # read a hb file
  → [Manual print statements] rad 553: >>> print(hb_read("data.hb"))  # read a hb file

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\scipy\linalg\_decomp_cossin.py
  → [Manual print statements] rad 103: >>> print(ue)

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\scipy\linalg\_decomp_svd.py
  → [Manual print statements] rad 459: >>> print(H)

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\scipy\linalg\_matfuncs.py
  → [Manual print statements] rad 207: print("logm result may be inaccurate, approximate err =", errest)
  → [Manual print statements] rad 711: print("funm result may be inaccurate, approximate err =", err)
  → [Manual print statements] rad 791: print("signm result may be inaccurate, approximate err =", errest)

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\scipy\linalg\_matfuncs_sqrtm.py
  → [Manual print statements] rad 205: print("Failed to find a square root.")

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\scipy\linalg\tests\test_lapack.py
  → [Manual print statements] rad 99: # print(a1)
  → [Manual print statements] rad 100: # print(ba, lo, hi, pivscale)

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\scipy\ndimage\_filters.py
  → [Manual print statements] rad 839: >>> print(input_img)

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\scipy\ndimage\_interpolation.py
  → [Manual print statements] rad 802: >>> print(ascent.shape)
  → [Manual print statements] rad 805: >>> print(result.shape)
  → [Manual print statements] rad 923: >>> print(img.shape)
  → [Manual print statements] rad 925: >>> print(img_45.shape)
  → [Manual print statements] rad 927: >>> print(full_img_45.shape)

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\scipy\ndimage\_measurements.py
  → [Manual print statements] rad 485: ...     print("fn says: %s : %s" % (val, pos))

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\scipy\odr\_models.py
  → [Manual print statements] rad 104: >>> print(output.beta)
  → [Manual print statements] rad 198: >>> print(output.beta)
  → [Manual print statements] rad 269: >>> print(output.beta)
  → [Manual print statements] rad 302: >>> print(output.beta)

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\scipy\odr\_odrpack.py
  → [Manual print statements] rad 610: print('Beta:', self.beta)
  → [Manual print statements] rad 611: print('Beta Std Error:', self.sd_beta)
  → [Manual print statements] rad 612: print('Beta Covariance:', self.cov_beta)
  → [Manual print statements] rad 614: print('Residual Variance:',self.res_var)
  → [Manual print statements] rad 615: print('Inverse Condition #:', self.inv_condnum)
  → [Manual print statements] rad 616: print('Reason(s) for Halting:')
  → [Manual print statements] rad 618: print('  %s' % r)
  → [Manual print statements] rad 851: print(res.shape)
  → [Manual print statements] rad 852: print(fcn_perms)

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\scipy\optimize\_basinhopping.py
  → [Manual print statements] rad 82: print("warning: basinhopping: local minimization failure")
  → [Manual print statements] rad 87: print("basinhopping step %d: f %g" % (self.nstep, self.energy))
  → [Manual print statements] rad 117: print("warning: basinhopping: local minimization failure")
  → [Manual print statements] rad 174: print("found new global minimum on step %d with function"
  → [Manual print statements] rad 187: print("basinhopping step %d: f %g trial_f %g accepted %d "
  → [Manual print statements] rad 241: print(f"adaptive stepsize: acceptance rate {accept_rate:f} target "
  → [Manual print statements] rad 604: >>> print("global minimum: x = [%.4f, %.4f], f(x) = %.4f" % (ret.x[0],
  → [Manual print statements] rad 630: >>> print("global minimum: x = [%.4f, %.4f], f(x) = %.4f" % (ret.x[0],
  → [Manual print statements] rad 639: ...         print("at minimum %.4f accepted %d" % (f, int(accepted)))

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\scipy\optimize\_cobyla_py.py
  → [Manual print statements] rad 185: print(f"COBYLA failed to find a solution: {sol.message}")

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\scipy\optimize\_differentialevolution.py
  → [Manual print statements] rad 1179: print(f"differential_evolution step {nit}: f(x)="
  → [Manual print statements] rad 1229: print(f"Polishing solution with '{polish_method}'")

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\scipy\optimize\_differentiate.py
  → [Manual print statements] rad 267: ...     print('here')

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\scipy\optimize\_linprog.py
  → [Manual print statements] rad 96: print('--------- Simplex Early Exit -------\n')
  → [Manual print statements] rad 97: print(f'The simplex method exited early with status {status:d}')
  → [Manual print statements] rad 98: print(message)
  → [Manual print statements] rad 100: print('--------- Simplex Complete --------\n')
  → [Manual print statements] rad 101: print(f'Iterations required: {nit}')
  → [Manual print statements] rad 103: print(f'--------- Iteration {nit:d}  ---------\n')
  → [Manual print statements] rad 107: print('Current Pseudo-Objective Value:')
  → [Manual print statements] rad 109: print('Current Objective Value:')
  → [Manual print statements] rad 110: print('f = ', fun)
  → [Manual print statements] rad 111: print()
  → [Manual print statements] rad 112: print('Current Solution Vector:')
  → [Manual print statements] rad 113: print('x = ', x)
  → [Manual print statements] rad 114: print()
  → [Manual print statements] rad 165: print("Iter:   X:")
  → [Manual print statements] rad 166: print(f"{nit: <5d}   ", end="")
  → [Manual print statements] rad 167: print(x)

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\scipy\optimize\_linprog_ip.py
  → [Manual print statements] rad 536: print("Primal Feasibility ",
  → [Manual print statements] rad 545: print(fmt.format(

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\scipy\optimize\_linprog_rs.py
  → [Manual print statements] rad 297: print("Phase",
  → [Manual print statements] rad 309: print(fmt.format(phase, iteration, slack, np.linalg.norm(con), fun))

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\scipy\optimize\_linprog_util.py
  → [Manual print statements] rad 1310: print(message)
  → [Manual print statements] rad 1312: print(f"         Current function value: {fun: <12.6f}")
  → [Manual print statements] rad 1313: print(f"         Iterations: {iteration:d}")

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\scipy\optimize\_minimize.py
  → [Manual print statements] rad 512: >>> print(res.message)

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\scipy\optimize\_minpack_py.py
  → [Manual print statements] rad 886: ...     print(e)

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\scipy\optimize\_optimize.py
  → [Potentially suspicious eval() usage] rad 300: def eval(x):
  → [Manual print statements] rad 924: print(msg)
  → [Manual print statements] rad 925: print("         Current function value: %f" % fval)
  → [Manual print statements] rad 926: print("         Iterations: %d" % iterations)
  → [Manual print statements] rad 927: print("         Function evaluations: %d" % fcalls[0])
  → [Manual print statements] rad 1469: print("         Current function value: %f" % fval)
  → [Manual print statements] rad 1470: print("         Iterations: %d" % k)
  → [Manual print statements] rad 1471: print("         Function evaluations: %d" % sf.nfev)
  → [Manual print statements] rad 1472: print("         Gradient evaluations: %d" % sf.ngev)
  → [Manual print statements] rad 1485: print(message)
  → [Manual print statements] rad 1813: print("         Current function value: %f" % fval)
  → [Manual print statements] rad 1814: print("         Iterations: %d" % k)
  → [Manual print statements] rad 1815: print("         Function evaluations: %d" % sf.nfev)
  → [Manual print statements] rad 1816: print("         Gradient evaluations: %d" % sf.ngev)
  → [Manual print statements] rad 2016: print("         Current function value: %f" % old_fval)
  → [Manual print statements] rad 2017: print("         Iterations: %d" % k)
  → [Manual print statements] rad 2018: print("         Function evaluations: %d" % sf.nfev)
  → [Manual print statements] rad 2019: print("         Gradient evaluations: %d" % sf.ngev)
  → [Manual print statements] rad 2020: print("         Hessian evaluations: %d" % hcalls)
  → [Manual print statements] rad 2279: print(" ")
  → [Manual print statements] rad 2280: print(header)
  → [Manual print statements] rad 2281: print("%5.0f   %12.6g %12.6g %s" % (fmin_data + (step,)))
  → [Manual print statements] rad 2325: print("%5.0f   %12.6g %12.6g %s" % (fmin_data + (step,)))
  → [Manual print statements] rad 2450: print(" ")
  → [Manual print statements] rad 2451: print(f"{'Func-count':^12} {'x':^12} {'f(x)': ^12}")
  → [Manual print statements] rad 2452: print(f"{funcalls:^12g} {x:^12.6g} {fx:^12.6g}")
  → [Manual print statements] rad 2533: print(f"{funcalls:^12g} {x:^12.6g} {fx:^12.6g}")
  → [Manual print statements] rad 2822: print(" ")
  → [Manual print statements] rad 2823: print(f"{'Func-count':^12} {'x':^12} {'f(x)': ^12}")
  → [Manual print statements] rad 2846: print(f"{funcalls:^12g} {xmin:^12.6g} {fval:^12.6g}")
  → [Manual print statements] rad 3567: print("         Current function value: %f" % fval)
  → [Manual print statements] rad 3568: print("         Iterations: %d" % iter)
  → [Manual print statements] rad 3569: print("         Function evaluations: %d" % fcalls[0])
  → [Manual print statements] rad 3582: print("\nOptimization terminated successfully;\n"
  → [Manual print statements] rad 4090: print(text)

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\scipy\optimize\_qap.py
  → [Manual print statements] rad 122: >>> print(res)
  → [Manual print statements] rad 134: >>> print(fun)
  → [Manual print statements] rad 141: >>> print(fun)
  → [Manual print statements] rad 154: >>> print(np.array_equal(perm_opt, res['col_ind']))
  → [Manual print statements] rad 165: >>> print(res)
  → [Manual print statements] rad 176: >>> print(res)
  → [Manual print statements] rad 356: >>> print(res.fun)
  → [Manual print statements] rad 361: >>> print(res.fun)
  → [Manual print statements] rad 369: >>> print(res.fun)
  → [Manual print statements] rad 376: >>> print(res.fun)

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\scipy\optimize\_root.py
  → [Manual print statements] rad 192: >>> print('Residual: %g' % abs(residual(sol.x)).max())

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\scipy\optimize\_slsqp_py.py
  → [Manual print statements] rad 416: print("%5s %5s %16s %16s" % ("NIT", "FC", "OBJFUN", "GNORM"))
  → [Manual print statements] rad 448: print("%5i %5i % 16.6E % 16.6E" % (majiter, sf.nfev,
  → [Manual print statements] rad 459: print(exit_modes[int(mode)] + "    (Exit mode " + str(mode) + ')')
  → [Manual print statements] rad 460: print("            Current function value:", fx)
  → [Manual print statements] rad 461: print("            Iterations:", majiter)
  → [Manual print statements] rad 462: print("            Function evaluations:", sf.nfev)
  → [Manual print statements] rad 463: print("            Gradient evaluations:", sf.ngev)

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\scipy\optimize\_spectral.py
  → [Manual print statements] rad 110: print("iter %d: ||F|| = %g, sigma = %g" % (k, F_k_norm, sigma_k))

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\scipy\optimize\_trustregion.py
  → [Manual print statements] rad 284: print(status_messages[warnflag])
  → [Manual print statements] rad 287: print("         Current function value: %f" % m.fun)
  → [Manual print statements] rad 288: print("         Iterations: %d" % k)
  → [Manual print statements] rad 289: print("         Function evaluations: %d" % sf.nfev)
  → [Manual print statements] rad 290: print("         Gradient evaluations: %d" % sf.ngev)
  → [Manual print statements] rad 291: print("         Hessian evaluations: %d" % (sf.nhev + nhessp[0]))

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\scipy\optimize\tests\test_constraints.py
  → [Potentially suspicious eval() usage] rad 183: bounds2 = eval(repr(Bounds(*args)))

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\scipy\optimize\tests\test_direct.py
  → [Manual print statements] rad 74: print("DIRECT minimization algorithm callback test")

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\scipy\optimize\tests\test__shgo.py
  → [Manual print statements] rad 212: print(f'x = {x}')
  → [Manual print statements] rad 320: print(f'res = {res}')
  → [Manual print statements] rad 541: print("Local minimization callback test")
  → [Manual print statements] rad 554: print("Local minimization callback test")
  → [Manual print statements] rad 1039: print(result.x, result.fun, fun.nfev)  # 50

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\scipy\optimize\_lsq\common.py
  → [Manual print statements] rad 546: print("{:^15}{:^15}{:^15}{:^15}{:^15}{:^15}"
  → [Manual print statements] rad 563: print("{:^15}{:^15}{:^15.4e}{}{}{:^15.2e}"
  → [Manual print statements] rad 569: print("{:^15}{:^15}{:^15}{:^15}{:^15}"
  → [Manual print statements] rad 586: print(f"{iteration:^15}{cost:^15.4e}{cost_reduction}{step_norm}{optimality:^15.2e}")

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\scipy\optimize\_lsq\least_squares.py
  → [Manual print statements] rad 961: print(result.message)
  → [Manual print statements] rad 962: print("Function evaluations {}, initial cost {:.4e}, final cost "

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\scipy\optimize\_lsq\lsq_linear.py
  → [Manual print statements] rad 334: print(termination_message)
  → [Manual print statements] rad 335: print(f"Final cost {cost:.4e}, first-order optimality {g_norm:.2e}")
  → [Manual print statements] rad 354: print(res.message)
  → [Manual print statements] rad 355: print(

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\scipy\optimize\_shgo_lib\_vertex.py
  → [Manual print statements] rad 198: print('=' * headlen)
  → [Manual print statements] rad 199: print(f"Vertex cache of size: {len(self.cache)}:")
  → [Manual print statements] rad 200: print('=' * headlen)

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\scipy\optimize\_trustregion_constr\minimize_trustregion_constr.py
  → [Manual print statements] rad 557: print(result.message)
  → [Manual print statements] rad 558: print("Number of iterations: {}, function evaluations: {}, "

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\scipy\optimize\_trustregion_constr\report.py
  → [Manual print statements] rad 16: print(fmt.format(*cls.COLUMN_NAMES))
  → [Manual print statements] rad 17: print(fmt.format(*separators))
  → [Manual print statements] rad 23: print(fmt.format(*args))
  → [Manual print statements] rad 27: print()

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\scipy\signal\_filter_design.py
  → [Manual print statements] rad 908: >>> print(zc)
  → [Manual print statements] rad 910: >>> print(zr)
  → [Manual print statements] rad 1016: >>> print(z)
  → [Manual print statements] rad 1778: >>> print(w[0].message)
  → [Manual print statements] rad 4678: ...         print(i, x)

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\scipy\signal\_fir_filter_design.py
  → [Manual print statements] rad 566: >>> print(taps[72:78])

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\scipy\signal\_ltisys.py
  → [Manual print statements] rad 1269: >>> print(sys)
  → [Manual print statements] rad 1669: >>> print(sys)

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\scipy\signal\_signaltools.py
  → [Manual print statements] rad 4182: >>> print(np.max(np.abs(y1 - y2)))

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\scipy\signal\_wavelets.py
  → [Manual print statements] rad 352: >>> print(len(vec2))

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\scipy\sparse\csgraph\_laplacian.py
  → [Manual print statements] rad 320: ...     print(cut + "-cut labels:\\n", 1 * (eves[:, 0]>0))  # 5.

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\scipy\sparse\csgraph\tests\test_graph_laplacian.py
  → [Potentially suspicious eval() usage] rad 44: mat = eval(mat, dict(np=np, sparse=sparse))
  → [Potentially suspicious eval() usage] rad 301: d[L] = eval(L)
  → [Potentially suspicious eval() usage] rad 303: d[L] = eval(L)(np.eye(n, dtype=mat.dtype))

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\scipy\sparse\linalg\_dsolve\__init__.py
  → [Manual print statements] rad 21: >>> print("Inverting a sparse linear system:")
  → [Manual print statements] rad 22: >>> print("The sparse matrix (constructed from diagonals):")
  → [Manual print statements] rad 25: >>> print("Solve: single precision complex:")
  → [Manual print statements] rad 29: >>> print(x)
  → [Manual print statements] rad 30: >>> print("Error: ", a@x-b)
  → [Manual print statements] rad 32: >>> print("Solve: double precision complex:")
  → [Manual print statements] rad 36: >>> print(x)
  → [Manual print statements] rad 37: >>> print("Error: ", a@x-b)
  → [Manual print statements] rad 39: >>> print("Solve: double precision:")
  → [Manual print statements] rad 42: >>> print(x)
  → [Manual print statements] rad 43: >>> print("Error: ", a@x-b)
  → [Manual print statements] rad 45: >>> print("Solve: single precision:")
  → [Manual print statements] rad 49: >>> print(x)
  → [Manual print statements] rad 50: >>> print("Error: ", a@x-b)

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\scipy\sparse\linalg\_eigen\_svds.py
  → [Manual print statements] rad 299: >>> print(singular_values)
  → [Manual print statements] rad 325: >>> print(M_from_diff0.astype(int))
  → [Manual print statements] rad 341: >>> print(M.T)
  → [Manual print statements] rad 353: >>> print(M.T @ M)
  → [Manual print statements] rad 363: >>> print(M @ M.T)
  → [Manual print statements] rad 435: >>> print(np.allclose(np.abs(u), np.abs(ue), atol=1e-6))

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\scipy\sparse\linalg\_eigen\lobpcg\lobpcg.py
  → [Manual print statements] rad 404: >>> print(eigenvalues)
  → [Manual print statements] rad 521: print(aux)
  → [Manual print statements] rad 736: print(f"iteration {iterationNumber}")
  → [Manual print statements] rad 737: print(f"current block size: {currentBlockSize}")
  → [Manual print statements] rad 738: print(f"eigenvalue(s):\n{_lambda}")
  → [Manual print statements] rad 739: print(f"residual norm(s):\n{residualNorms}")
  → [Manual print statements] rad 1009: print(f"Final iterative eigenvalue(s):\n{_lambda}")
  → [Manual print statements] rad 1010: print(f"Final iterative residual norm(s):\n{residualNorms}")
  → [Manual print statements] rad 1092: print(f"Final postprocessing eigenvalue(s):\n{_lambda}")
  → [Manual print statements] rad 1093: print(f"Final residual norm(s):\n{residualNorms}")

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\scipy\sparse\linalg\_isolve\iterative.py
  → [Manual print statements] rad 72: >>> print(exitCode)  # 0 indicates successful convergence
  → [Manual print statements] rad 199: >>> print(exit_code)  # 0 indicates successful convergence
  → [Manual print statements] rad 335: >>> print(exit_code)    # 0 indicates successful convergence
  → [Manual print statements] rad 443: >>> print(exit_code)  # 0 indicates successful convergence
  → [Manual print statements] rad 621: >>> print(exitCode)            # 0 indicates successful convergence
  → [Manual print statements] rad 853: >>> print(exitCode)            # 0 indicates successful convergence

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\scipy\sparse\linalg\_isolve\lgmres.py
  → [Manual print statements] rad 117: >>> print(exitCode)            # 0 indicates successful convergence

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\scipy\sparse\linalg\_isolve\lsmr.py
  → [Manual print statements] rad 230: print(' ')
  → [Manual print statements] rad 231: print('LSMR            Least-squares solution of  Ax = b\n')
  → [Manual print statements] rad 232: print(f'The matrix A has {m} rows and {n} columns')
  → [Manual print statements] rad 233: print('damp = %20.14e\n' % (damp))
  → [Manual print statements] rad 234: print(f'atol = {atol:8.2e}                 conlim = {conlim:8.2e}\n')
  → [Manual print statements] rad 235: print(f'btol = {btol:8.2e}             maxiter = {maxiter:8g}\n')
  → [Manual print statements] rad 302: print(msg[0])
  → [Manual print statements] rad 310: print(' ')
  → [Manual print statements] rad 311: print(hdg1, hdg2)
  → [Manual print statements] rad 317: print(''.join([str1, str2, str3]))
  → [Manual print statements] rad 461: print(' ')
  → [Manual print statements] rad 462: print(hdg1, hdg2)
  → [Manual print statements] rad 468: print(''.join([str1, str2, str3, str4]))
  → [Manual print statements] rad 476: print(' ')
  → [Manual print statements] rad 477: print('LSMR finished')
  → [Manual print statements] rad 478: print(msg[istop])
  → [Manual print statements] rad 479: print(f'istop ={istop:8g}    normr ={normr:8.1e}')
  → [Manual print statements] rad 480: print(f'    normA ={normA:8.1e}    normAr ={normar:8.1e}')
  → [Manual print statements] rad 481: print(f'itn   ={itn:8g}    condA ={condA:8.1e}')
  → [Manual print statements] rad 482: print('    normx =%8.1e' % (normx))
  → [Manual print statements] rad 483: print(str1, str2)
  → [Manual print statements] rad 484: print(str3, str4)

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\scipy\sparse\linalg\_isolve\lsqr.py
  → [Manual print statements] rad 342: print(' ')
  → [Manual print statements] rad 343: print('LSQR            Least-squares solution of  Ax = b')
  → [Manual print statements] rad 348: print(str1)
  → [Manual print statements] rad 349: print(str2)
  → [Manual print statements] rad 350: print(str3)
  → [Manual print statements] rad 351: print(str4)
  → [Manual print statements] rad 405: print(msg[0])
  → [Manual print statements] rad 412: print(' ')
  → [Manual print statements] rad 413: print(head1, head2)
  → [Manual print statements] rad 419: print(str1, str2, str3)
  → [Manual print statements] rad 567: print(str1, str2, str3, str4)
  → [Manual print statements] rad 575: print(' ')
  → [Manual print statements] rad 576: print('LSQR finished')
  → [Manual print statements] rad 577: print(msg[istop])
  → [Manual print statements] rad 578: print(' ')
  → [Manual print statements] rad 583: print(str1 + '   ' + str2)
  → [Manual print statements] rad 584: print(str3 + '   ' + str4)
  → [Manual print statements] rad 585: print(' ')

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\scipy\sparse\linalg\_isolve\minres.py
  → [Manual print statements] rad 76: >>> print(exitCode)            # 0 indicates successful convergence
  → [Manual print statements] rad 118: print(first + 'Solution of symmetric Ax = b')
  → [Manual print statements] rad 119: print(first + f'n      =  {n:3g}     shift  =  {shift:23.14e}')
  → [Manual print statements] rad 120: print(first + f'itnlim =  {maxiter:3g}     rtol   =  {rtol:11.2e}')
  → [Manual print statements] rad 121: print()
  → [Manual print statements] rad 199: print()
  → [Manual print statements] rad 200: print()
  → [Manual print statements] rad 201: print('   Itn     x(1)     Compatible    LS       norm(A)  cond(A) gbar/|A|')
  → [Manual print statements] rad 348: print(str1 + str2 + str3)
  → [Manual print statements] rad 351: print()
  → [Manual print statements] rad 360: print()
  → [Manual print statements] rad 361: print(last + f' istop   =  {istop:3g}               itn   ={itn:5g}')
  → [Manual print statements] rad 362: print(last + f' Anorm   =  {Anorm:12.4e}      Acond =  {Acond:12.4e}')
  → [Manual print statements] rad 363: print(last + f' rnorm   =  {rnorm:12.4e}      ynorm =  {ynorm:12.4e}')
  → [Manual print statements] rad 364: print(last + f' Arnorm  =  {Arnorm:12.4e}')
  → [Manual print statements] rad 365: print(last + msg[istop+1])

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\scipy\sparse\linalg\_isolve\tfqmr.py
  → [Manual print statements] rad 86: >>> print(exitCode)            # 0 indicates successful convergence
  → [Manual print statements] rad 159: print("TFQMR: Linear solve converged due to reach TOL "
  → [Manual print statements] rad 177: print("TFQMR: Linear solve not converged due to reach MAXIT "

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\scipy\sparse\linalg\_isolve\_gcrotmk.py
  → [Manual print statements] rad 258: >>> print(exit_code)

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\scipy\sparse\tests\test_base.py
  → [Potentially suspicious eval() usage] rad 1870: c = eval(format + '_matrix')(A)

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\scipy\spatial\_kdtree.py
  → [Manual print statements] rad 426: >>> print(dd, ii, sep='\n')
  → [Manual print statements] rad 433: >>> print(dd, ii, sep='\n')
  → [Manual print statements] rad 443: >>> print(dd, ii, sep='\n')
  → [Manual print statements] rad 452: >>> print(dd, ii, sep='\n')
  → [Manual print statements] rad 461: >>> print(dd, ii, sep='\n')

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\scipy\spatial\tests\test_distance.py
  → [Potentially suspicious eval() usage] rad 424: cdist(X1, X2, metric=eval(metric), **kwargs)
  → [Potentially suspicious eval() usage] rad 430: cdist(X1, X2, metric=eval(metric), *args)
  → [Potentially suspicious eval() usage] rad 537: y2 = cdist(X1, X2, metric=eval(metric), **kwargs)
  → [Manual print statements] rad 542: print(e_cls.__name__)
  → [Manual print statements] rad 543: print(e)
  → [Potentially suspicious eval() usage] rad 547: cdist(X1, X2, metric=eval(metric), **kwargs)
  → [Manual print statements] rad 564: print("testing: ", metric, " with: ", eo_name)
  → [Manual print statements] rad 600: print(e_cls.__name__)
  → [Manual print statements] rad 601: print(e)
  → [Potentially suspicious eval() usage] rad 717: pdist(X1, metric=eval(metric), **kwargs)
  → [Potentially suspicious eval() usage] rad 723: pdist(X1, metric=eval(metric), *args)
  → [Manual print statements] rad 1334: print(m)
  → [Manual print statements] rad 1344: print(m)
  → [Manual print statements] rad 1354: print(m)
  → [Manual print statements] rad 1364: print(m)
  → [Manual print statements] rad 1374: print(m)
  → [Manual print statements] rad 1384: print(m)
  → [Manual print statements] rad 1394: print(m)
  → [Manual print statements] rad 1404: print(m)
  → [Manual print statements] rad 1414: print(m)
  → [Manual print statements] rad 1424: print(m)
  → [Manual print statements] rad 1432: print(D.shape, D.dtype)
  → [Potentially suspicious eval() usage] rad 1464: y2 = pdist(X, metric=eval(metric), **kwargs)
  → [Manual print statements] rad 1469: print(e_cls.__name__)
  → [Manual print statements] rad 1470: print(e)
  → [Potentially suspicious eval() usage] rad 1474: pdist(X, metric=eval(metric), **kwargs)
  → [Manual print statements] rad 1491: print("testing: ", metric, " with: ", eo_name)
  → [Manual print statements] rad 1523: print(e_cls.__name__)
  → [Manual print statements] rad 1524: print(e)
  → [Manual print statements] rad 1716: print(A.shape, Y.shape, Yr.shape)
  → [Manual print statements] rad 1791: print(A.shape, Y.shape)
  → [Potentially suspicious eval() usage] rad 2176: for m in [metric, eval(metric), "test_" + metric]:

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\scipy\special\_add_newdocs.py
  → [Manual print statements] rad 317: ...     print("a = %19.16f  b=%19.16f" % (a, b))
  → [Manual print statements] rad 2923: >>> print(ellipsoid_area(1, 3, 5))
  → [Manual print statements] rad 5493: >>> print(p)
  → [Manual print statements] rad 5562: >>> print(p)
  → [Manual print statements] rad 5632: >>> print(p)
  → [Manual print statements] rad 5910: >>> print(r.shape, deltas.shape)
  → [Manual print statements] rad 7615: >>> print('Dn=%f, sqrt(n)*Dn=%f' % (Dn, Kn))
  → [Manual print statements] rad 7617: >>> print(chr(10).join(['For a sample of size n drawn from a N(0, 1) distribution:',
  → [Manual print statements] rad 9768: >>> print(r.shape, deltas.shape)
  → [Manual print statements] rad 10295: ...    print(cols)
  → [Manual print statements] rad 10303: >>> print(f'Dn-={Dnpm[0]:f}, Dn+={Dnpm[1]:f}')
  → [Manual print statements] rad 10306: >>> print(f'For a sample of size {n} drawn from N(0, 1):',

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\scipy\special\_basic.py
  → [Manual print statements] rad 626: ...     print(f"Roots: {zeros}")
  → [Manual print statements] rad 627: ...     print(f"Gradients: {grads}")
  → [Manual print statements] rad 702: ...     print(f"Roots: {zeros}")
  → [Manual print statements] rad 703: ...     print(f"Gradients: {grads}")
  → [Manual print statements] rad 784: ...     print(f"Y1' Roots: {y1grad_roots.real}")
  → [Manual print statements] rad 785: ...     print(f"Y1 values: {y1_values.real}")

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\scipy\special\tests\test_basic.py
  → [Manual print statements] rad 1415: #   print(float(x))

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\scipy\special\tests\test_cdflib.py
  → [Manual print statements] rad 455: # print(qchisq(0.999999, df = 2, ncp = ncp))

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\scipy\special\tests\test_erfinv.py
  → [Manual print statements] rad 21: #       print(x)

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\scipy\special\tests\test_exponential_integrals.py
  → [Manual print statements] rad 48: #   print(float(x*mp.exp(x)*np.expint(1, x)))

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\scipy\special\tests\test_iv_ratio.py
  → [Manual print statements] rad 52: print(f"({v}, {x}, {float(iv_ratio_mp_float(v,x))}),")

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\scipy\special\tests\test_orthogonal.py
  → [Manual print statements] rad 216: # print("shifted jacobi p,q = ", p, q)
  → [Potentially suspicious eval() usage] rad 263: p = eval(pstr)

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\scipy\special\tests\test_powm1.py
  → [Manual print statements] rad 11: #   >>> print(float(mpmath.powm1(2.0, 1e-7))

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\scipy\special\_precompute\cosine_cdf.py
  → [Manual print statements] rad 16: print('p =', p)
  → [Manual print statements] rad 17: print('q =', q)

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\scipy\special\_precompute\expn_asy.py
  → [Manual print statements] rad 35: print(__doc__)

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\scipy\special\_precompute\gammainc_asy.py
  → [Manual print statements] rad 95: print(__doc__)

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\scipy\special\_precompute\gammainc_data.py
  → [Manual print statements] rad 96: print(__doc__)
  → [Manual print statements] rad 120: print(f"{(time() - t0)/60} minutes elapsed")

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\scipy\special\_precompute\hyp2f1_data.py
  → [Manual print statements] rad 475: print(args.parameter_groups)

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\scipy\special\_precompute\lambertw.py
  → [Manual print statements] rad 22: print(__doc__)
  → [Manual print statements] rad 26: print(f"p = {p}")
  → [Manual print statements] rad 27: print(f"q = {q}")

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\scipy\special\_precompute\loggamma.py
  → [Manual print statements] rad 26: print(__doc__)
  → [Manual print statements] rad 27: print()
  → [Manual print statements] rad 32: print("Stirling series coefficients")
  → [Manual print statements] rad 33: print("----------------------------")
  → [Manual print statements] rad 34: print("\n".join(stirling_coeffs))
  → [Manual print statements] rad 35: print()
  → [Manual print statements] rad 36: print("Taylor series coefficients")
  → [Manual print statements] rad 37: print("--------------------------")
  → [Manual print statements] rad 38: print("\n".join(taylor_coeffs))
  → [Manual print statements] rad 39: print()

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\scipy\special\_precompute\wrightomega.py
  → [Manual print statements] rad 27: print('Series Error')
  → [Manual print statements] rad 31: print(x, error, error < desired_error)
  → [Manual print statements] rad 33: print('Exp error')
  → [Manual print statements] rad 37: print(x, error, error < desired_error)

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\scipy\special\_precompute\wright_bessel.py
  → [Potentially suspicious eval() usage] rad 183: def eval(cls, n, rho, v):
  → [Potentially suspicious eval() usage] rad 203: def eval(cls, m, rho, beta):
  → [Manual print statements] rad 332: switch = {1: lambda: print(series_small_a()),
  → [Manual print statements] rad 333: 2: lambda: print(series_small_a_small_b()),
  → [Manual print statements] rad 334: 3: lambda: print(asymptotic_series()),
  → [Manual print statements] rad 335: 4: lambda: print(optimal_epsilon_integral())
  → [Manual print statements] rad 337: switch.get(args.action, lambda: print("Invalid input."))()
  → [Manual print statements] rad 338: print(f"\n{(time() - t0)/60:.1f} minutes elapsed.\n")

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\scipy\special\_precompute\wright_bessel_data.py
  → [Manual print statements] rad 45: print(__doc__)
  → [Manual print statements] rad 126: print(f"Computing {x_range.size} single points.")
  → [Manual print statements] rad 127: print("Tests will fail for the following data points:")
  → [Manual print statements] rad 138: print("failing data point a, b, x, value = "
  → [Manual print statements] rad 148: print(f"{(time() - t0)/60:.1f} minutes elapsed")

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\scipy\special\_precompute\zetac.py
  → [Manual print statements] rad 19: print(__doc__)
  → [Manual print statements] rad 23: print("\n".join(coeffs[::-1]))

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\scipy\stats\_bws_test.py
  → [Manual print statements] rad 154: >>> print(res.statistic)
  → [Manual print statements] rad 160: >>> print(res.pvalue)

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\scipy\stats\_censored_data.py
  → [Manual print statements] rad 131: >>> print(data)
  → [Manual print statements] rad 142: >>> print(data)
  → [Manual print statements] rad 167: >>> print(data)
  → [Manual print statements] rad 182: >>> print(data)
  → [Manual print statements] rad 196: >>> print(data)
  → [Manual print statements] rad 215: >>> print(data)
  → [Manual print statements] rad 338: >>> print(data)
  → [Manual print statements] rad 379: >>> print(data)
  → [Manual print statements] rad 420: >>> print(data)

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\scipy\stats\_fit.py
  → [Manual print statements] rad 1051: >>> print(res.statistic)
  → [Manual print statements] rad 1053: >>> print(res.critical_values)
  → [Manual print statements] rad 1055: >>> print(res.significance_level)

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\scipy\stats\_hypotests.py
  → [Manual print statements] rad 1952: >>> print(res)
  → [Manual print statements] rad 1981: ...         print(f"({i} - {j}) {l:>6.3f} {h:>6.3f}")

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\scipy\stats\_mannwhitneyu.py
  → [Manual print statements] rad 358: >>> print(U1)
  → [Manual print statements] rad 368: >>> print(U2)
  → [Manual print statements] rad 375: >>> print(p)
  → [Manual print statements] rad 383: >>> print(pnorm)
  → [Manual print statements] rad 401: >>> print(p)
  → [Manual print statements] rad 409: >>> print(pnorm)
  → [Manual print statements] rad 425: >>> print(res)
  → [Manual print statements] rad 438: >>> print(res)

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\scipy\stats\_morestats.py
  → [Manual print statements] rad 290: ...     print(f"{i=}: {m=:.3g}, {k=:.3g}, {(m-k)=:.3g}")

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\scipy\stats\_mstats_basic.py
  → [Manual print statements] rad 1105: print(result.intercept, result.intercept_stderr)
  → [Manual print statements] rad 1125: >>> print(f"R-squared: {res.rvalue**2:.6f}")
  → [Manual print statements] rad 1143: >>> print(f"slope (95%): {res.slope:.6f} +/- {ts*res.stderr:.6f}")
  → [Manual print statements] rad 1145: >>> print(f"intercept (95%): {res.intercept:.6f}"
  → [Manual print statements] rad 2036: >>> print(trim(z,(3,8)))
  → [Manual print statements] rad 2038: >>> print(trim(z,(0.1,0.2),relative=True))
  → [Manual print statements] rad 3284: >>> print(mquantiles(data, axis=0, limit=(0, 50)))
  → [Manual print statements] rad 3290: >>> print(mquantiles(data, axis=0, limit=(0, 50)))
  → [Manual print statements] rad 3457: >>> print(stats.mstats.sem(a))
  → [Manual print statements] rad 3463: >>> print(stats.mstats.sem(a, axis=None, ddof=0))

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\scipy\stats\_mstats_extras.py
  → [Manual print statements] rad 74: ...     print(f"{int(quantile * 100)}th percentile: {quantile_estimates[i]}")

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\scipy\stats\_resampling.py
  → [Manual print statements] rad 459: >>> print(std_true)
  → [Manual print statements] rad 462: >>> print(std_sample)
  → [Manual print statements] rad 518: >>> print(res.confidence_interval)
  → [Manual print statements] rad 534: >>> print(ci_contains_true_std)
  → [Manual print statements] rad 548: >>> print(ci_l[:5])
  → [Manual print statements] rad 550: >>> print(ci_u[:5])
  → [Manual print statements] rad 555: >>> print(np.sum((ci_l < std_true) & (std_true < ci_u)))
  → [Manual print statements] rad 577: >>> print(my_statistic(sample1, sample2))
  → [Manual print statements] rad 579: >>> print(res.confidence_interval)
  → [Manual print statements] rad 584: >>> print(res.standard_error)
  → [Manual print statements] rad 594: >>> print(pearsonr(x, y)[0])  # element 0 is the statistic
  → [Manual print statements] rad 606: >>> print(res.confidence_interval)
  → [Manual print statements] rad 922: >>> print(res.statistic)
  → [Manual print statements] rad 924: >>> print(res.pvalue)
  → [Manual print statements] rad 1300: >>> print(res.power)
  → [Manual print statements] rad 1964: >>> print(res.statistic)
  → [Manual print statements] rad 1966: >>> print(res.pvalue)
  → [Manual print statements] rad 1983: >>> print(res.statistic)
  → [Manual print statements] rad 1985: >>> print(res.pvalue)
  → [Manual print statements] rad 1998: >>> print(res_asymptotic.pvalue)

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\scipy\stats\_stats_py.py
  → [Manual print statements] rad 10825: print(result.intercept, result.intercept_stderr)
  → [Manual print statements] rad 10845: >>> print(f"R-squared: {res.rvalue**2:.6f}")
  → [Manual print statements] rad 10863: >>> print(f"slope (95%): {res.slope:.6f} +/- {ts*res.stderr:.6f}")
  → [Manual print statements] rad 10865: >>> print(f"intercept (95%): {res.intercept:.6f}"

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\scipy\stats\_tukeylambda_stats.py
  → [Manual print statements] rad 26: # print("p =", [mp.fp.mpf(c) for c in p])
  → [Manual print statements] rad 27: # print("q =", [mp.fp.mpf(c) for c in q])
  → [Manual print statements] rad 131: # print("p =", [mp.fp.mpf(c) for c in p])
  → [Manual print statements] rad 132: # print("q =", [mp.fp.mpf(c) for c in q])

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\scipy\stats\tests\test_binned_statistic.py
  → [Manual print statements] rad 57: print(binned_statistic(x, u, 'count', bins=1000))

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\scipy\stats\tests\test_contingency.py
  → [Manual print statements] rad 96: # print(s)
  → [Manual print statements] rad 146: # print(s)

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\scipy\stats\tests\test_continuous_basic.py
  → [Manual print statements] rad 419: #     print(mpmath.nstr(sf, 20), mpmath.nstr(cdf, 20), mpmath.nstr(pdf, 20))

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\scipy\stats\tests\test_discrete_distns.py
  → [Manual print statements] rad 236: # print(pnbinom(250, 50, 32/63, lower.tail=FALSE))
  → [Manual print statements] rad 305: # print(pmf)
  → [Manual print statements] rad 306: # print(cdf)

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\scipy\stats\tests\test_distributions.py
  → [Manual print statements] rad 1692: # print(float(mp.log(genlogistic_cdf_mp(x, c))))
  → [Manual print statements] rad 2933: # print(pinvgauss(5, mu, 1))
  → [Manual print statements] rad 2966: # print(pinvgauss(0.001, 1.05, 1, log.p=TRUE, lower.tail=FALSE))
  → [Manual print statements] rad 3265: # print(float(powerlognorm_sf_mp(x, c, s)))
  → [Manual print statements] rad 4219: #     print(float(mp.exp((-a-b)*x + (b/c)*-mp.expm1(-c*x))))
  → [Manual print statements] rad 4410: # print(qbeta(p, a, b))
  → [Manual print statements] rad 4421: # print(qbeta(1-p, count_list + 1, 100000 - count_list))
  → [Manual print statements] rad 4615: #   print(float(x))
  → [Manual print statements] rad 4839: #    print(float(mp.gammainc(1, 20, mp.inf, regularized=True)/2))
  → [Manual print statements] rad 6648: # print(price(x, sigma=1, vee=x))
  → [Manual print statements] rad 6662: # print(qrice(p, vee = 500, sigma = 4))
  → [Manual print statements] rad 6673: # print(qrice(0.5, vee = b, sigma = 1))
  → [Manual print statements] rad 6826: #     print(float(mp_sf(1, 2.5, 0.75)))
  → [Manual print statements] rad 6857: #     print(float(mp_isf(0.25, 2.5, 0.75)))
  → [Manual print statements] rad 6886: #     print(s)
  → [Manual print statements] rad 9291: # print(ref)

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\scipy\stats\tests\test_resampling.py
  → [Manual print statements] rad 217: # print(result)

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\scipy\stats\tests\test_stats.py
  → [Manual print statements] rad 2090: # print(summary(relation))
  → [Manual print statements] rad 5452: print(0.0 not in p_values)
  → [Manual print statements] rad 7130: # +         print(c(i+1, k*i,(1/k)))
  → [Manual print statements] rad 7169: # +         print(c(i+1, k*i,(1/k)))

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\scipy\_lib\decorator.py
  → [Manual print statements] rad 168: print('Error in generated code:', file=sys.stderr)
  → [Manual print statements] rad 169: print(src, file=sys.stderr)

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\scipy\_lib\_docscrape.py
  → [Manual print statements] rad 590: print("Warning: invalid role %s" % self._role)

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\scipy\_lib\cobyqa\main.py
  → [Manual print statements] rad 498: print("Starting the optimization procedure.")
  → [Manual print statements] rad 499: print(f"Initial trust-region radius: {options[Options.RHOBEG]}.")
  → [Manual print statements] rad 500: print(f"Final trust-region radius: {options[Options.RHOEND]}.")
  → [Manual print statements] rad 501: print(
  → [Manual print statements] rad 505: print(f"Maximum number of iterations: {options[Options.MAX_ITER]}.")
  → [Manual print statements] rad 506: print()
  → [Manual print statements] rad 810: print()
  → [Manual print statements] rad 1480: print()
  → [Manual print statements] rad 1481: print(f"{message}.")
  → [Manual print statements] rad 1482: print(f"Number of function evaluations: {n_eval}.")
  → [Manual print statements] rad 1483: print(f"Number of iterations: {n_iter}.")
  → [Manual print statements] rad 1485: print(f"Least value of {pb.fun_name}: {fun_val}.")
  → [Manual print statements] rad 1486: print(f"Maximum constraint violation: {r_val}.")
  → [Manual print statements] rad 1488: print(f"Corresponding point: {x}.")

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\scipy\_lib\cobyqa\problem.py
  → [Manual print statements] rad 76: print(f"{self.name}({x}) = {f}")
  → [Manual print statements] rad 472: print(f"{fun_name}({x}) = {val}")

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\scipy\_lib\cobyqa\utils\versions.py
  → [Manual print statements] rad 48: print("System settings")
  → [Manual print statements] rad 49: print("---------------")
  → [Manual print statements] rad 51: print(
  → [Manual print statements] rad 58: print()
  → [Manual print statements] rad 59: print("Python dependencies")
  → [Manual print statements] rad 60: print("-------------------")
  → [Manual print statements] rad 62: print(

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\sklearn\base.py
  → [Manual print statements] rad 1231: f"passing a class to {print(inspect.stack()[0][3])} is deprecated and "
  → [Manual print statements] rad 1271: f"passing a class to {print(inspect.stack()[0][3])} is deprecated and "
  → [Manual print statements] rad 1313: f"passing a class to {print(inspect.stack()[0][3])} is deprecated and "
  → [Manual print statements] rad 1338: f"passing a class to {print(inspect.stack()[0][3])} is deprecated and "

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\sklearn\discriminant_analysis.py
  → [Manual print statements] rad 407: >>> print(clf.predict([[-0.8, -1]]))
  → [Manual print statements] rad 942: >>> print(clf.predict([[-0.8, -1]]))

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\sklearn\exceptions.py
  → [Manual print statements] rad 59: ...     print(repr(e))

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\sklearn\naive_bayes.py
  → [Manual print statements] rad 223: >>> print(clf.predict([[-0.8, -1]]))
  → [Manual print statements] rad 228: >>> print(clf_pf.predict([[-0.8, -1]]))
  → [Manual print statements] rad 867: >>> print(clf.predict(X[2:3]))
  → [Manual print statements] rad 1003: >>> print(clf.predict(X[2:3]))
  → [Manual print statements] rad 1159: >>> print(clf.predict(X[2:3]))
  → [Manual print statements] rad 1331: >>> print(clf.predict(X[2:3]))

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\sklearn\_config.py
  → [Manual print statements] rad 97: ``print(SVC())`` while True will only print 'SVC()' while the default
  → [Manual print statements] rad 249: ``print(SVC())`` while True will only print 'SVC()', but would print

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\sklearn\_min_dependencies.py
  → [Manual print statements] rad 75: print(min_version)

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\sklearn\__init__.py
  → [Manual print statements] rad 160: print("I: Seeding RNGs with %r" % _random_seed)

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\sklearn\cluster\_affinity_propagation.py
  → [Manual print statements] rad 128: print("Converged after %d iterations." % it)
  → [Manual print statements] rad 133: print("Did not converge")

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\sklearn\cluster\_bisect_k_means.py
  → [Manual print statements] rad 349: print(f"New centroids from bisection: {best_centers}")

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\sklearn\cluster\_kmeans.py
  → [Manual print statements] rad 575: print(f"Iteration {i}, inertia {inertia}")
  → [Manual print statements] rad 582: print(f"Converged at iteration {i}: strict convergence.")
  → [Manual print statements] rad 590: print(
  → [Manual print statements] rad 713: print(f"Iteration {i}, inertia {inertia}.")
  → [Manual print statements] rad 720: print(f"Converged at iteration {i}: strict convergence.")
  → [Manual print statements] rad 728: print(
  → [Manual print statements] rad 1499: print("Initialization complete")
  → [Manual print statements] rad 1650: print(f"[MiniBatchKMeans] Reassigning {n_reassigns} cluster centers.")
  → [Manual print statements] rad 1964: print(
  → [Manual print statements] rad 1982: print(
  → [Manual print statements] rad 1991: print(f"Converged (small centers change) at step {step}/{n_steps}")
  → [Manual print statements] rad 2007: print(
  → [Manual print statements] rad 2094: print(f"Init {init_idx + 1}/{self._n_init} with method {init}")
  → [Manual print statements] rad 2116: print(f"Inertia for init {init_idx + 1}/{self._n_init}: {inertia}")

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\sklearn\cluster\_spectral.py
  → [Manual print statements] rad 174: print("SVD did not converge, randomizing and trying again")
  → [Manual print statements] rad 754: print(f"Computing label assignment using {self.assign_labels}")

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\sklearn\covariance\_graph_lasso.py
  → [Manual print statements] rad 180: print(
  → [Manual print statements] rad 704: print(
  → [Manual print statements] rad 709: print("[graphical_lasso_path] alpha: %.2e" % alpha)
  → [Manual print statements] rad 1076: print(

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\sklearn\covariance\_robust_covariance.py
  → [Manual print statements] rad 178: print(
  → [Manual print statements] rad 204: print("Maximum number of iterations reached")

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\sklearn\datasets\_base.py
  → [Manual print statements] rad 991: >>> print(digits.data.shape)

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\sklearn\datasets\_california_housing.py
  → [Manual print statements] rad 159: >>> print(housing.data.shape, housing.target.shape)
  → [Manual print statements] rad 161: >>> print(housing.feature_names[0:6])

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\sklearn\datasets\_lfw.py
  → [Manual print statements] rad 377: ...    print(name)

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\sklearn\datasets\_olivetti_faces.py
  → [Manual print statements] rad 150: print("downloading Olivetti faces from %s to %s" % (FACES.url, data_home))

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\sklearn\datasets\_samples_generator.py
  → [Manual print statements] rad 1006: >>> print(X.shape)
  → [Manual print statements] rad 1012: >>> print(X.shape)
  → [Manual print statements] rad 2260: >>> print(rows[0][:5], columns[0][:5])

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\sklearn\datasets\_twenty_newsgroups.py
  → [Manual print statements] rad 312: print(80 * "_")
  → [Manual print statements] rad 313: print("Cache loading failed")
  → [Manual print statements] rad 314: print(80 * "_")
  → [Manual print statements] rad 315: print(e)

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\sklearn\decomposition\_dict_learning.py
  → [Manual print statements] rad 550: print(f"{n_unused} unused atoms resampled.")
  → [Manual print statements] rad 602: print("[dict_learning]", end=" ")
  → [Manual print statements] rad 613: print(
  → [Manual print statements] rad 653: print("")
  → [Manual print statements] rad 655: print("--- Convergence reached after %d iterations" % ii)
  → [Manual print statements] rad 2093: print(f"Minibatch step {step}/{n_steps}: mean batch cost: {batch_cost}")
  → [Manual print statements] rad 2107: print(
  → [Manual print statements] rad 2116: print(f"Converged (small dictionary change) at step {step}/{n_steps}")
  → [Manual print statements] rad 2132: print(
  → [Manual print statements] rad 2177: print("[dict_learning]")

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\sklearn\decomposition\_lda.py
  → [Manual print statements] rad 686: print(
  → [Manual print statements] rad 696: print("iteration: %d of max_iter: %d" % (i + 1, max_iter))

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\sklearn\decomposition\_nmf.py
  → [Manual print statements] rad 517: print("violation:", violation / violation_init)
  → [Manual print statements] rad 521: print("Converged at iteration", n_iter + 1)
  → [Manual print statements] rad 878: print(
  → [Manual print statements] rad 890: print(
  → [Manual print statements] rad 2147: print(f"Minibatch step {step}/{n_steps}: mean batch cost: {batch_cost}")
  → [Manual print statements] rad 2162: print(
  → [Manual print statements] rad 2171: print(f"Converged (small H change) at step {step}/{n_steps}")
  → [Manual print statements] rad 2187: print(

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\sklearn\decomposition\_pca.py
  → [Manual print statements] rad 357: >>> print(pca.explained_variance_ratio_)
  → [Manual print statements] rad 359: >>> print(pca.singular_values_)
  → [Manual print statements] rad 365: >>> print(pca.explained_variance_ratio_)
  → [Manual print statements] rad 367: >>> print(pca.singular_values_)
  → [Manual print statements] rad 373: >>> print(pca.explained_variance_ratio_)
  → [Manual print statements] rad 375: >>> print(pca.singular_values_)

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\sklearn\decomposition\_truncated_svd.py
  → [Manual print statements] rad 153: >>> print(svd.explained_variance_ratio_)
  → [Manual print statements] rad 155: >>> print(svd.explained_variance_ratio_.sum())
  → [Manual print statements] rad 157: >>> print(svd.singular_values_)

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\sklearn\ensemble\_bagging.py
  → [Manual print statements] rad 131: print(

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\sklearn\ensemble\_forest.py
  → [Manual print statements] rad 167: print("building tree %d of %d" % (tree_idx + 1, n_trees))
  → [Manual print statements] rad 1479: >>> print(clf.predict([[0, 0, 0, 0]]))
  → [Manual print statements] rad 1848: >>> print(regr.predict([[0, 0, 0, 0]]))

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\sklearn\ensemble\_gb.py
  → [Manual print statements] rad 310: print(("%10s " + "%16s " * (len(header_fields) - 1)) % tuple(header_fields))
  → [Manual print statements] rad 340: print(

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\sklearn\ensemble\_voting.py
  → [Manual print statements] rad 294: >>> print(eclf1.predict(X))
  → [Manual print statements] rad 303: >>> print(eclf2.predict(X))
  → [Manual print statements] rad 322: >>> print(eclf3.predict(X))
  → [Manual print statements] rad 324: >>> print(eclf3.transform(X).shape)
  → [Manual print statements] rad 638: >>> print(er.fit(X, y).predict(X))

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\sklearn\ensemble\_hist_gradient_boosting\gradient_boosting.py
  → [Manual print statements] rad 677: print("Fitting gradient boosted rounds:")
  → [Manual print statements] rad 839: print(
  → [Manual print statements] rad 985: print(
  → [Manual print statements] rad 990: print(
  → [Manual print statements] rad 995: print(
  → [Manual print statements] rad 1000: print(
  → [Manual print statements] rad 1005: print(
  → [Manual print statements] rad 1171: print(
  → [Manual print statements] rad 1187: print("{:.3f} s".format(duration))
  → [Manual print statements] rad 1232: print(log_msg)

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\sklearn\externals\_scipy\sparse\csgraph\_laplacian.py
  → [Manual print statements] rad 327: ...     print(cut + "-cut labels:\\n", 1 * (eves[:, 0]>0))  # 5.

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\sklearn\feature_extraction\image.py
  → [Manual print statements] rad 238: >>> print(graph)
  → [Manual print statements] rad 404: >>> print('Image shape: {}'.format(one_image.shape))
  → [Manual print statements] rad 407: >>> print('Patches shape: {}'.format(patches.shape))
  → [Manual print statements] rad 410: >>> print(patches[1])
  → [Manual print statements] rad 415: >>> print(patches[800])
  → [Manual print statements] rad 494: >>> print('Image shape: {}'.format(one_image.shape))
  → [Manual print statements] rad 497: >>> print('Patches shape: {}'.format(image_patches.shape))
  → [Manual print statements] rad 503: >>> print(f"Reconstructed shape: {image_reconstructed.shape}")
  → [Manual print statements] rad 565: >>> print(f"Image shape: {X.shape}")
  → [Manual print statements] rad 569: >>> print(f"Patches shape: {pe_trans.shape}")
  → [Manual print statements] rad 572: >>> print(f"Reconstructed shape: {X_reconstructed.shape}")

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\sklearn\feature_extraction\text.py
  → [Manual print statements] rad 741: >>> print(X.shape)
  → [Manual print statements] rad 1105: >>> print(X.toarray())
  → [Manual print statements] rad 1116: >>> print(X2.toarray())
  → [Manual print statements] rad 1937: >>> print(X.shape)

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\sklearn\feature_selection\_rfe.py
  → [Manual print statements] rad 330: print("Fitting estimator with %d features." % np.sum(support_))

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\sklearn\gaussian_process\kernels.py
  → [Manual print statements] rad 102: ...    print(hyperparameter)
  → [Manual print statements] rad 107: >>> for key in sorted(params): print(f"{key} : {params[key]}")
  → [Manual print statements] rad 175: >>> print(kernel(X))
  → [Manual print statements] rad 531: >>> print(kernel.bounds)
  → [Manual print statements] rad 534: >>> print(kernel.n_dims)
  → [Manual print statements] rad 536: >>> print(kernel.theta)

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\sklearn\impute\_base.py
  → [Manual print statements] rad 281: >>> print(imp_mean.transform(X))

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\sklearn\impute\_iterative.py
  → [Manual print statements] rad 846: print("[IterativeImputer] Completing matrix with shape %s" % (X.shape,))
  → [Manual print statements] rad 874: print(
  → [Manual print statements] rad 883: print(
  → [Manual print statements] rad 890: print("[IterativeImputer] Early stopping criterion reached.")
  → [Manual print statements] rad 933: print("[IterativeImputer] Completing matrix with shape %s" % (X.shape,))
  → [Manual print statements] rad 946: print(

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\sklearn\linear_model\_bayes.py
  → [Manual print statements] rad 317: print("Convergence after ", str(iter_), " iterations")
  → [Manual print statements] rad 715: print("Converged after %s iterations" % iter_)

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\sklearn\linear_model\_coordinate_descent.py
  → [Manual print statements] rad 344: >>> print(coef_path)
  → [Manual print statements] rad 355: >>> print(coef_path_continuous([5., 1., .5]))
  → [Manual print statements] rad 712: print(model)
  → [Manual print statements] rad 714: print("Path: %03i out of %03i" % (i, n_alphas))
  → [Manual print statements] rad 872: >>> print(regr.coef_)
  → [Manual print statements] rad 874: >>> print(regr.intercept_)
  → [Manual print statements] rad 876: >>> print(regr.predict([[0, 0]]))
  → [Manual print statements] rad 1300: >>> print(clf.coef_)
  → [Manual print statements] rad 1302: >>> print(clf.intercept_)
  → [Manual print statements] rad 2304: >>> print(regr.alpha_)
  → [Manual print statements] rad 2306: >>> print(regr.intercept_)
  → [Manual print statements] rad 2308: >>> print(regr.predict([[0, 0]]))
  → [Manual print statements] rad 2528: >>> print(clf.coef_)
  → [Manual print statements] rad 2531: >>> print(clf.intercept_)
  → [Manual print statements] rad 2770: >>> print(clf.coef_)
  → [Manual print statements] rad 2773: >>> print(clf.intercept_)
  → [Manual print statements] rad 2972: >>> print(clf.coef_)
  → [Manual print statements] rad 2975: >>> print(clf.intercept_)

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\sklearn\linear_model\_huber.py
  → [Manual print statements] rad 242: >>> print("True coefficients:", coef)
  → [Manual print statements] rad 244: >>> print("Huber coefficients:", huber.coef_)
  → [Manual print statements] rad 246: >>> print("Linear Regression coefficients:", linear.coef_)

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\sklearn\linear_model\_least_angle.py
  → [Manual print statements] rad 620: print("Step\t\tAdded\t\tDropped\t\tActive set size\t\tC")
  → [Manual print statements] rad 744: print(
  → [Manual print statements] rad 895: print(
  → [Manual print statements] rad 1026: >>> print(reg.coef_)
  → [Manual print statements] rad 1347: >>> print(reg.coef_)
  → [Manual print statements] rad 2179: >>> print(reg.coef_)

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\sklearn\linear_model\_passive_aggressive.py
  → [Manual print statements] rad 166: >>> print(clf.coef_)
  → [Manual print statements] rad 168: >>> print(clf.intercept_)
  → [Manual print statements] rad 170: >>> print(clf.predict([[0, 0, 0, 0]]))
  → [Manual print statements] rad 451: >>> print(regr.coef_)
  → [Manual print statements] rad 453: >>> print(regr.intercept_)
  → [Manual print statements] rad 455: >>> print(regr.predict([[0, 0, 0, 0]]))

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\sklearn\linear_model\_stochastic_gradient.py
  → [Manual print statements] rad 1205: >>> print(clf.predict([[-0.8, -1]]))
  → [Manual print statements] rad 2205: >>> print(clf.predict([[4, 4]]))

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\sklearn\linear_model\_theil_sen.py
  → [Manual print statements] rad 435: print("Breakdown point: {0}".format(self.breakdown_))
  → [Manual print statements] rad 436: print("Number of samples: {0}".format(n_samples))
  → [Manual print statements] rad 438: print("Tolerable outliers: {0}".format(tol_outliers))
  → [Manual print statements] rad 439: print("Number of subpopulations: {0}".format(self.n_subpopulation_))

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\sklearn\linear_model\_glm\_newton_solver.py
  → [Manual print statements] rad 232: print("  Backtracking Line Search")
  → [Manual print statements] rad 233: print(f"    eps=16 * finfo.eps={eps}")
  → [Manual print statements] rad 256: print(
  → [Manual print statements] rad 267: print(
  → [Manual print statements] rad 278: print(
  → [Manual print statements] rad 296: print("  Line search did not converge and resorts to lbfgs instead.")
  → [Manual print statements] rad 302: print(
  → [Manual print statements] rad 313: print("  Check Convergence")
  → [Manual print statements] rad 326: print(f"    1. max |gradient| {g_max_abs} <= {self.tol} {check}")
  → [Manual print statements] rad 337: print(f"    2. Newton decrement {0.5 * d2} <= {self.tol} {check}")
  → [Manual print statements] rad 350: print(f"  Solver did converge at loss = {loss_value}.")
  → [Manual print statements] rad 390: print(f"Newton iter={self.iteration}")
  → [Manual print statements] rad 495: print(
  → [Manual print statements] rad 569: print(
  → [Manual print statements] rad 597: print(

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\sklearn\manifold\_mds.py
  → [Manual print statements] rad 160: print("it: %d, stress %s" % (it, stress))
  → [Manual print statements] rad 164: print("breaking at iteration %d with stress %s" % (it, stress))

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\sklearn\manifold\_t_sne.py
  → [Manual print statements] rad 125: print("[t-SNE] Computed conditional probabilities in {:.3f}s".format(duration))
  → [Manual print statements] rad 419: print(
  → [Manual print statements] rad 431: print(
  → [Manual print statements] rad 439: print(
  → [Manual print statements] rad 522: >>> print(f"{trustworthiness(X, X_embedded, n_neighbors=5):.2f}")
  → [Manual print statements] rad 937: print("[t-SNE] Computing pairwise distances...")
  → [Manual print statements] rad 976: print("[t-SNE] Computing {} nearest neighbors...".format(n_neighbors))
  → [Manual print statements] rad 990: print(
  → [Manual print statements] rad 1000: print(
  → [Manual print statements] rad 1100: print(
  → [Manual print statements] rad 1120: print(

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\sklearn\metrics\_classification.py
  → [Manual print statements] rad 2644: >>> print(classification_report(y_true, y_pred, target_names=target_names))
  → [Manual print statements] rad 2657: >>> print(classification_report(y_true, y_pred, labels=[1, 2, 3]))

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\sklearn\metrics\cluster\_supervised.py
  → [Manual print statements] rad 614: >>> print("%.6f" % homogeneity_score([0, 0, 1, 1], [0, 0, 1, 2]))
  → [Manual print statements] rad 616: >>> print("%.6f" % homogeneity_score([0, 0, 1, 1], [0, 1, 2, 3]))
  → [Manual print statements] rad 622: >>> print("%.6f" % homogeneity_score([0, 0, 1, 1], [0, 1, 0, 1]))
  → [Manual print statements] rad 624: >>> print("%.6f" % homogeneity_score([0, 0, 1, 1], [0, 0, 0, 0]))
  → [Manual print statements] rad 690: >>> print(completeness_score([0, 0, 1, 1], [0, 0, 0, 0]))
  → [Manual print statements] rad 692: >>> print(completeness_score([0, 1, 2, 3], [0, 0, 1, 1]))
  → [Manual print statements] rad 698: >>> print(completeness_score([0, 0, 1, 1], [0, 1, 0, 1]))
  → [Manual print statements] rad 700: >>> print(completeness_score([0, 0, 0, 0], [0, 1, 2, 3]))
  → [Manual print statements] rad 781: >>> print("%.6f" % v_measure_score([0, 0, 1, 2], [0, 0, 1, 1]))
  → [Manual print statements] rad 783: >>> print("%.6f" % v_measure_score([0, 1, 2, 3], [0, 0, 1, 1]))
  → [Manual print statements] rad 790: >>> print("%.6f" % v_measure_score([0, 0, 1, 1], [0, 0, 1, 2]))
  → [Manual print statements] rad 792: >>> print("%.6f" % v_measure_score([0, 0, 1, 1], [0, 1, 2, 3]))
  → [Manual print statements] rad 798: >>> print("%.6f" % v_measure_score([0, 0, 0, 0], [0, 1, 2, 3]))
  → [Manual print statements] rad 804: >>> print("%.6f" % v_measure_score([0, 0, 1, 1], [0, 0, 0, 0]))

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\sklearn\mixture\_base.py
  → [Manual print statements] rad 535: print("Initialization %d" % n_init)
  → [Manual print statements] rad 537: print("Initialization %d" % n_init)
  → [Manual print statements] rad 545: print("  Iteration %d" % n_iter)
  → [Manual print statements] rad 548: print(
  → [Manual print statements] rad 558: print(f"Initialization {converged_msg}.")
  → [Manual print statements] rad 561: print(

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\sklearn\model_selection\_classification_threshold.py
  → [Manual print statements] rad 289: >>> print(confusion_matrix(y_test, classifier.predict(X_test)))
  → [Manual print statements] rad 295: >>> print(confusion_matrix(y_test, classifier_other_threshold.predict(X_test)))
  → [Manual print statements] rad 642: >>> print(classification_report(y_test, classifier.predict(X_test)))
  → [Manual print statements] rad 655: >>> print(
  → [Manual print statements] rad 659: >>> print(classification_report(y_test, classifier_tuned.predict(X_test)))

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\sklearn\model_selection\_search.py
  → [Manual print statements] rad 962: print(

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\sklearn\model_selection\_search_successive_halving.py
  → [Manual print statements] rad 301: print(f"n_iterations: {n_iterations}")
  → [Manual print statements] rad 302: print(f"n_required_iterations: {n_required_iterations}")
  → [Manual print statements] rad 303: print(f"n_possible_iterations: {n_possible_iterations}")
  → [Manual print statements] rad 304: print(f"min_resources_: {self.min_resources_}")
  → [Manual print statements] rad 305: print(f"max_resources_: {self.max_resources_}")
  → [Manual print statements] rad 306: print(f"aggressive_elimination: {self.aggressive_elimination}")
  → [Manual print statements] rad 307: print(f"factor: {self.factor}")
  → [Manual print statements] rad 330: print("-" * 10)
  → [Manual print statements] rad 331: print(f"iter: {itr}")
  → [Manual print statements] rad 332: print(f"n_candidates: {n_candidates}")
  → [Manual print statements] rad 333: print(f"n_resources: {n_resources}")

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\sklearn\model_selection\_split.py
  → [Manual print statements] rad 197: >>> print(loo)
  → [Manual print statements] rad 200: ...     print(f"Fold {i}:")
  → [Manual print statements] rad 201: ...     print(f"  Train: index={train_index}")
  → [Manual print statements] rad 202: ...     print(f"  Test:  index={test_index}")
  → [Manual print statements] rad 282: >>> print(lpo)
  → [Manual print statements] rad 285: ...     print(f"Fold {i}:")
  → [Manual print statements] rad 286: ...     print(f"  Train: index={train_index}")
  → [Manual print statements] rad 287: ...     print(f"  Test:  index={test_index}")
  → [Manual print statements] rad 479: >>> print(kf)
  → [Manual print statements] rad 482: ...     print(f"Fold {i}:")
  → [Manual print statements] rad 483: ...     print(f"  Train: index={train_index}")
  → [Manual print statements] rad 484: ...     print(f"  Test:  index={test_index}")
  → [Manual print statements] rad 584: >>> print(group_kfold)
  → [Manual print statements] rad 587: ...     print(f"Fold {i}:")
  → [Manual print statements] rad 588: ...     print(f"  Train: index={train_index}, group={groups[train_index]}")
  → [Manual print statements] rad 589: ...     print(f"  Test:  index={test_index}, group={groups[test_index]}")
  → [Manual print statements] rad 729: >>> print(skf)
  → [Manual print statements] rad 732: ...     print(f"Fold {i}:")
  → [Manual print statements] rad 733: ...     print(f"  Train: index={train_index}")
  → [Manual print statements] rad 734: ...     print(f"  Test:  index={test_index}")
  → [Manual print statements] rad 937: >>> print(sgkf)
  → [Manual print statements] rad 940: ...     print(f"Fold {i}:")
  → [Manual print statements] rad 941: ...     print(f"  Train: index={train_index}")
  → [Manual print statements] rad 942: ...     print(f"         group={groups[train_index]}")
  → [Manual print statements] rad 943: ...     print(f"  Test:  index={test_index}")
  → [Manual print statements] rad 944: ...     print(f"         group={groups[test_index]}")
  → [Manual print statements] rad 1145: >>> print(tscv)
  → [Manual print statements] rad 1148: ...     print(f"Fold {i}:")
  → [Manual print statements] rad 1149: ...     print(f"  Train: index={train_index}")
  → [Manual print statements] rad 1150: ...     print(f"  Test:  index={test_index}")
  → [Manual print statements] rad 1171: ...     print(f"Fold {i}:")
  → [Manual print statements] rad 1172: ...     print(f"  Train: index={train_index}")
  → [Manual print statements] rad 1173: ...     print(f"  Test:  index={test_index}")
  → [Manual print statements] rad 1186: ...     print(f"Fold {i}:")
  → [Manual print statements] rad 1187: ...     print(f"  Train: index={train_index}")
  → [Manual print statements] rad 1188: ...     print(f"  Test:  index={test_index}")
  → [Manual print statements] rad 1334: >>> print(logo)
  → [Manual print statements] rad 1337: ...     print(f"Fold {i}:")
  → [Manual print statements] rad 1338: ...     print(f"  Train: index={train_index}, group={groups[train_index]}")
  → [Manual print statements] rad 1339: ...     print(f"  Test:  index={test_index}, group={groups[test_index]}")
  → [Manual print statements] rad 1456: >>> print(lpgo)
  → [Manual print statements] rad 1459: ...     print(f"Fold {i}:")
  → [Manual print statements] rad 1460: ...     print(f"  Train: index={train_index}, group={groups[train_index]}")
  → [Manual print statements] rad 1461: ...     print(f"  Test:  index={test_index}, group={groups[test_index]}")
  → [Manual print statements] rad 1691: >>> print(rkf)
  → [Manual print statements] rad 1694: ...     print(f"Fold {i}:")
  → [Manual print statements] rad 1695: ...     print(f"  Train: index={train_index}")
  → [Manual print statements] rad 1696: ...     print(f"  Test:  index={test_index}")
  → [Manual print statements] rad 1759: >>> print(rskf)
  → [Manual print statements] rad 1762: ...     print(f"Fold {i}:")
  → [Manual print statements] rad 1763: ...     print(f"  Train: index={train_index}")
  → [Manual print statements] rad 1764: ...     print(f"  Test:  index={test_index}")
  → [Manual print statements] rad 2003: >>> print(rs)
  → [Manual print statements] rad 2006: ...     print(f"Fold {i}:")
  → [Manual print statements] rad 2007: ...     print(f"  Train: index={train_index}")
  → [Manual print statements] rad 2008: ...     print(f"  Test:  index={test_index}")
  → [Manual print statements] rad 2028: ...     print(f"Fold {i}:")
  → [Manual print statements] rad 2029: ...     print(f"  Train: index={train_index}")
  → [Manual print statements] rad 2030: ...     print(f"  Test:  index={test_index}")
  → [Manual print statements] rad 2123: >>> print(groups.shape)
  → [Manual print statements] rad 2128: >>> print(gss)
  → [Manual print statements] rad 2131: ...     print(f"Fold {i}:")
  → [Manual print statements] rad 2132: ...     print(f"  Train: index={train_index}, group={groups[train_index]}")
  → [Manual print statements] rad 2133: ...     print(f"  Test:  index={test_index}, group={groups[test_index]}")
  → [Manual print statements] rad 2258: >>> print(sss)
  → [Manual print statements] rad 2261: ...     print(f"Fold {i}:")
  → [Manual print statements] rad 2262: ...     print(f"  Train: index={train_index}")
  → [Manual print statements] rad 2263: ...     print(f"  Test:  index={test_index}")
  → [Manual print statements] rad 2518: >>> print(ps)
  → [Manual print statements] rad 2521: ...     print(f"Fold {i}:")
  → [Manual print statements] rad 2522: ...     print(f"  Train: index={train_index}")
  → [Manual print statements] rad 2523: ...     print(f"  Test:  index={test_index}")

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\sklearn\model_selection\_validation.py
  → [Manual print statements] rad 338: >>> print(scores['test_neg_mean_squared_error'])
  → [Manual print statements] rad 340: >>> print(scores['train_r2'])
  → [Manual print statements] rad 678: >>> print(cross_val_score(lasso, X, y, cv=3))
  → [Manual print statements] rad 840: print(f"{start_msg}{(80 - len(start_msg)) * '.'}")
  → [Manual print statements] rad 920: print(end_msg)
  → [Manual print statements] rad 1626: >>> print(f"Original Score: {score:.3f}")
  → [Manual print statements] rad 1628: >>> print(
  → [Manual print statements] rad 1633: >>> print(f"P-value: {pvalue:.3f}")
  → [Manual print statements] rad 1962: ...     print(f"{train_size} samples were used to train the model")
  → [Manual print statements] rad 1963: ...     print(f"The average train accuracy is {cv_train_scores.mean():.2f}")
  → [Manual print statements] rad 1964: ...     print(f"The average test accuracy is {cv_test_scores.mean():.2f}")
  → [Manual print statements] rad 2050: print("[learning_curve] Training set sizes: " + str(train_sizes_abs))
  → [Manual print statements] rad 2433: >>> print(f"The average train accuracy is {train_scores.mean():.2f}")
  → [Manual print statements] rad 2435: >>> print(f"The average test accuracy is {test_scores.mean():.2f}")

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\sklearn\neighbors\_base.py
  → [Manual print statements] rad 802: >>> print(neigh.kneighbors([[1., 1., 1.]]))
  → [Manual print statements] rad 1159: >>> print(np.asarray(rng[0][0]))
  → [Manual print statements] rad 1161: >>> print(np.asarray(rng[1][0]))

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\sklearn\neighbors\_classification.py
  → [Manual print statements] rad 182: >>> print(neigh.predict([[1.1]]))
  → [Manual print statements] rad 184: >>> print(neigh.predict_proba([[0.9]]))
  → [Manual print statements] rad 606: >>> print(neigh.predict([[1.5]]))
  → [Manual print statements] rad 608: >>> print(neigh.predict_proba([[1.0]]))

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\sklearn\neighbors\_graph.py
  → [Manual print statements] rad 604: >>> print(counts)

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\sklearn\neighbors\_nca.py
  → [Manual print statements] rad 178: >>> print(knn.score(X_test, y_test))
  → [Manual print statements] rad 182: >>> print(knn.score(nca.transform(X_test), y_test))
  → [Manual print statements] rad 340: print("[{}] Training took {:8.2f}s.".format(cls_name, t_train))
  → [Manual print statements] rad 418: print("Finding principal components... ", end="")
  → [Manual print statements] rad 427: print("Finding most discriminative components... ", end="")
  → [Manual print statements] rad 432: print("done in {:5.2f}s".format(time.time() - init_time))
  → [Manual print statements] rad 480: print("[{}]".format(cls_name))
  → [Manual print statements] rad 481: print(
  → [Manual print statements] rad 513: print(

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\sklearn\neighbors\_nearest_centroid.py
  → [Manual print statements] rad 131: >>> print(clf.predict([[-0.8, -1]]))

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\sklearn\neighbors\_regression.py
  → [Manual print statements] rad 160: >>> print(neigh.predict([[1.5]]))
  → [Manual print statements] rad 399: >>> print(neigh.predict([[1.5]]))

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\sklearn\neighbors\tests\test_nca.py
  → [Manual print statements] rad 90: print(X_t)
  → [Manual print statements] rad 472: print("{} iterations remaining...".format(rem_iter))

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\sklearn\neural_network\_multilayer_perceptron.py
  → [Manual print statements] rad 656: print("Iteration %d, loss = %.8f" % (self.n_iter_, self.loss_))
  → [Manual print statements] rad 713: print("Validation score: %f" % self.validation_scores_[-1])

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\sklearn\neural_network\_rbm.py
  → [Manual print statements] rad 428: print(

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\sklearn\neural_network\_stochastic_optimizers.py
  → [Manual print statements] rad 68: print(msg + " Stopping.")
  → [Manual print statements] rad 155: print(msg + " Stopping.")
  → [Manual print statements] rad 160: print(msg + " Learning rate too small. Stopping.")
  → [Manual print statements] rad 165: print(msg + " Setting learning rate to %f" % self.learning_rate)

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\sklearn\preprocessing\_data.py
  → [Manual print statements] rad 389: >>> print(scaler.fit(data))
  → [Manual print statements] rad 391: >>> print(scaler.data_max_)
  → [Manual print statements] rad 393: >>> print(scaler.transform(data))
  → [Manual print statements] rad 398: >>> print(scaler.transform([[2, 2]]))
  → [Manual print statements] rad 832: >>> print(scaler.fit(data))
  → [Manual print statements] rad 834: >>> print(scaler.mean_)
  → [Manual print statements] rad 836: >>> print(scaler.transform(data))
  → [Manual print statements] rad 841: >>> print(scaler.transform([[2, 2]]))
  → [Manual print statements] rad 3252: >>> print(pt.fit(data))
  → [Manual print statements] rad 3254: >>> print(pt.lambdas_)
  → [Manual print statements] rad 3256: >>> print(pt.transform(data))
  → [Manual print statements] rad 3665: >>> print(power_transform(data, method='box-cox'))

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\sklearn\semi_supervised\_self_training.py
  → [Manual print statements] rad 349: print(

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\sklearn\svm\_base.py
  → [Manual print statements] rad 254: print("[LibSVM]", end="")
  → [Manual print statements] rad 1194: print("[LibLinear]", end="")

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\sklearn\svm\_bounds.py
  → [Manual print statements] rad 71: >>> print(f"{l1_min_c(X, y, loss='squared_hinge', fit_intercept=True):.4f}")

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\sklearn\svm\_classes.py
  → [Manual print statements] rad 227: >>> print(clf.named_steps['linearsvc'].coef_)
  → [Manual print statements] rad 230: >>> print(clf.named_steps['linearsvc'].intercept_)
  → [Manual print statements] rad 232: >>> print(clf.predict([[0, 0, 0, 0]]))
  → [Manual print statements] rad 493: >>> print(regr.named_steps['linearsvr'].coef_)
  → [Manual print statements] rad 495: >>> print(regr.named_steps['linearsvr'].intercept_)
  → [Manual print statements] rad 497: >>> print(regr.predict([[0, 0, 0, 0]]))
  → [Manual print statements] rad 833: >>> print(clf.predict([[-0.8, -1]]))
  → [Manual print statements] rad 1093: >>> print(clf.predict([[-0.8, -1]]))

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\sklearn\tests\test_docstrings.py
  → [Manual print statements] rad 205: print(msg)
  → [Manual print statements] rad 208: print("All docstring checks passed for {}!".format(args.import_path))

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\sklearn\tests\test_metaestimators.py
  → [Manual print statements] rad 255: print("estimators: ", len(all_estimators()))
  → [Manual print statements] rad 259: print("\n", Estimator.__name__, sig)
  → [Manual print statements] rad 273: print(meta_estimator)

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\sklearn\tree\_export.py
  → [Manual print statements] rad 1051: >>> print(r)

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\sklearn\tree\_reingold_tilford.py
  → [Manual print statements] rad 84: # print("finished v =", v.tree, "children")
  → [Manual print statements] rad 137: # print(wl.tree, "is conflicted with", wr.tree, 'moving', subtrees,
  → [Manual print statements] rad 150: # print("shift:", w, shift, w.change)

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\sklearn\utils\optimize.py
  → [Manual print statements] rad 48: print("  Line Search")
  → [Manual print statements] rad 49: print(f"    eps=16 * finfo.eps={eps}")
  → [Manual print statements] rad 50: print("    try line search wolfe1")
  → [Manual print statements] rad 56: print("    wolfe1 line search was " + _not_ + "successful")
  → [Manual print statements] rad 68: print(
  → [Manual print statements] rad 79: print(
  → [Manual print statements] rad 99: print("    last resort: try line search wolfe2")
  → [Manual print statements] rad 105: print("    wolfe2 line search was " + _not_ + "successful")
  → [Manual print statements] rad 151: print(
  → [Manual print statements] rad 163: print(
  → [Manual print statements] rad 173: print(
  → [Manual print statements] rad 182: print("  Inner CG solver iteration 0 fell back to steepest descent")
  → [Manual print statements] rad 195: print(
  → [Manual print statements] rad 282: print(f"Newton-CG iter = {k}")
  → [Manual print statements] rad 283: print("  Check Convergence")
  → [Manual print statements] rad 284: print(f"    max |gradient| <= tol: {max_absgrad} <= {tol} {check}")
  → [Manual print statements] rad 327: print(f"  Solver did converge at loss = {old_fval}.")

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\sklearn\utils\validation.py
  → [Manual print statements] rad 205: ...     print("Test passed: Array contains only finite values.")
  → [Manual print statements] rad 207: ...     print("Test failed: Array contains non-finite values.")
  → [Manual print statements] rad 1734: ...     print(f"Model is not fitted yet.")

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\sklearn\utils\_available_if.py
  → [Manual print statements] rad 85: ...        print("Hello")

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\sklearn\utils\_show_versions.py
  → [Manual print statements] rad 91: print("\nSystem:")
  → [Manual print statements] rad 93: print("{k:>10}: {stat}".format(k=k, stat=stat))
  → [Manual print statements] rad 95: print("\nPython dependencies:")
  → [Manual print statements] rad 97: print("{k:>13}: {stat}".format(k=k, stat=stat))
  → [Manual print statements] rad 99: print(
  → [Manual print statements] rad 108: print()
  → [Manual print statements] rad 109: print("threadpoolctl info:")
  → [Manual print statements] rad 113: print(f"{key:>15}: {val}")
  → [Manual print statements] rad 115: print()

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\sklearn\utils\_testing.py
  → [Manual print statements] rad 99: ...     print(42)

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\sklearn\utils\_user_interface.py
  → [Manual print statements] rad 57: print(_message_with_time(source, message, timeit.default_timer() - start))

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\sklearn\utils\tests\test_class_weight.py
  → [Manual print statements] rad 69: print(y)

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\sklearn\utils\tests\test_testing.py
  → [Manual print statements] rad 1079: code = "print('something to stdout')"
  → [Manual print statements] rad 1083: code = "print('something to stdout')"
  → [Manual print statements] rad 1090: code = "\n".join(["import sys", "print('something to stderr', file=sys.stderr)"])

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\sklearn\_build_utils\version.py
  → [Manual print statements] rad 16: print(version)

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\backend\venv\Lib\site-packages\tenacity\wait.py
  → [Manual print statements] rad 97: print("Wait 1s for 3 attempts, 2s for 5 attempts and 5s

FIL: C:\Users\tjans\Documents\Hagel\hagelskott-analys\frontend\node_modules\flatted\python\test.py
  → [Manual print statements] rad 63: print('OK')

